import express from 'express';
import InvoiceDBContext from '../dal/InvoiceDBContext.js';

const router = express.Router();
const invoiceDB = new InvoiceDBContext();

// ‚úÖ GET REVENUE REPORT BY PERIOD
router.get('/income-report', async (req, res) => {
    try {
        const { 
            period = 'week',  // week, month, quarter
            range = '',       // specific range value
            year = new Date().getFullYear()
        } = req.query;

        console.log('üìä Getting revenue report with params:', {
            period,
            range,
            year
        });

        const result = await invoiceDB.getRevenueReport(period, range, year);

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'L·∫•y b√°o c√°o doanh thu th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/income-report:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y b√°o c√°o doanh thu',
            error: error.message
        });
    }
});

// ‚úÖ GET DETAILED REVENUE REPORT
router.get('/report-detail', async (req, res) => {
    try {
        const { 
            startDate,
            endDate,
            groupBy = 'month' // week, month, quarter
        } = req.query;

        console.log('üìä Getting detailed revenue report with params:', {
            startDate,
            endDate,
            groupBy
        });

        const result = await invoiceDB.getDetailedRevenueReport(startDate, endDate, groupBy);

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'L·∫•y b√°o c√°o chi ti·∫øt th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/report-detail:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y b√°o c√°o chi ti·∫øt',
            error: error.message
        });
    }
});

// ‚úÖ GET REVENUE STATISTICS
router.get('/statistics', async (req, res) => {
    try {
        const { 
            startDate,
            endDate
        } = req.query;

        console.log('üìä Getting revenue statistics with params:', {
            startDate,
            endDate
        });

        const result = await invoiceDB.getRevenueStatistics(startDate, endDate);

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'L·∫•y th·ªëng k√™ doanh thu th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/statistics:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y th·ªëng k√™ doanh thu',
            error: error.message
        });
    }
});

// ‚úÖ GET TOP PERFORMING ITEMS
router.get('/top-items', async (req, res) => {
    try {
        const { 
            startDate,
            endDate,
            limit = 10,
            itemType = 'all' // all, Room, Service
        } = req.query;

        console.log('üìä Getting top performing items with params:', {
            startDate,
            endDate,
            limit,
            itemType
        });

        const result = await invoiceDB.getTopPerformingItems(startDate, endDate, limit, itemType);

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'L·∫•y danh s√°ch item hi·ªáu su·∫•t cao th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/top-items:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y top performing items',
            error: error.message
        });
    }
});

// ‚úÖ GET MONTHLY COMPARISON
router.get('/monthly-comparison', async (req, res) => {
    try {
        const { 
            year = new Date().getFullYear(),
            compareWith = year - 1
        } = req.query;

        console.log('üìä Getting monthly comparison with params:', {
            year,
            compareWith
        });

        const result = await invoiceDB.getMonthlyComparison(year, compareWith);

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'L·∫•y so s√°nh theo th√°ng th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/monthly-comparison:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y so s√°nh theo th√°ng',
            error: error.message
        });
    }
});

// ‚úÖ TH√äM: Debug endpoint ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu √¢m
router.get('/debug-negative', async (req, res) => {
    try {
    console.log('üîç Debugging negative revenue data...');
    
    const result = await invoiceDB.getNegativeRevenueData();

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'Debug d·ªØ li·ªáu √¢m th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/debug-negative:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi debug d·ªØ li·ªáu √¢m',
            error: error.message
        });
    }
});

// ‚úÖ TH√äM: Raw data endpoint ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu th√¥
router.get('/raw-data', async (req, res) => {
    try {
        const { 
            startDate,
            endDate,
            itemType = 'all'
        } = req.query;

        console.log('üìã Getting raw revenue data with params:', {
            startDate,
            endDate,
            itemType
        });

        const result = await invoiceDB.getRawInvoiceData(50);

        if (!result.success) {
            return res.status(500).json({
                success: false,
                message: result.message,
                error: result.error
            });
        }

        res.json({
            success: true,
            data: result.data,
            message: 'L·∫•y d·ªØ li·ªáu th√¥ th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå Error in GET /revenue-report/raw-data:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói server khi l·∫•y d·ªØ li·ªáu th√¥',
            error: error.message
        });
    }
});

export default router;
