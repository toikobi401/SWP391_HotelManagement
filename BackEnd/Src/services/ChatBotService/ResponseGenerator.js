import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';

dotenv.config();

class ResponseGenerator {
    constructor(contextManager) {
        this.contextManager = contextManager;
        
        // Initialize Google AI
        const apiKey = process.env.GOOGLE_AI_API_KEY;
        
        if (!apiKey) {
            console.error('‚ùå GOOGLE_AI_API_KEY is not set in .env file');
            throw new Error('Google AI API key is required');
        }
        
        this.genAI = new GoogleGenerativeAI(apiKey);
        const modelName = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
        
        this.model = this.genAI.getGenerativeModel({ 
            model: modelName,
            generationConfig: {
                temperature: 0.7,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 2048,
                candidateCount: 1,
            },
            safetySettings: [
                {
                    category: "HARM_CATEGORY_HARASSMENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE",
                },
                {
                    category: "HARM_CATEGORY_HATE_SPEECH", 
                    threshold: "BLOCK_MEDIUM_AND_ABOVE",
                },
                {
                    category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE",
                },
                {
                    category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                    threshold: "BLOCK_MEDIUM_AND_ABOVE",
                }
            ],
        });

        console.log('‚úÖ ResponseGenerator initialized with model:', modelName);
    }

    // ‚úÖ ENHANCED CHAT RESPONSE WITH DATABASE INTEGRATION
    async generateChatResponse(message, conversationHistory = []) {
        try {
            console.log('ü§ñ Generating enhanced chat response for:', message.substring(0, 50) + '...');

            // ‚úÖ GET ENHANCED CONTEXT WITH ALL DATABASE DATA
            const dynamicContext = await this.contextManager.buildDynamicContext();
            const hotelContext = this.contextManager.getHotelContext();
            
            // ‚úÖ CHECK FOR SPECIFIC DATA QUERIES
            const specificData = await this.handleSpecificQueries(message);
            
            let enhancedPrompt = `${hotelContext}\n\n${dynamicContext}`;
            
            if (specificData) {
                enhancedPrompt += `\n\nüîç D·ªÆ LI·ªÜU C·ª§ TH·ªÇ CHO TRUY V·∫§N:\n${specificData}\n`;
            }
            
            enhancedPrompt += `\n\nUser: ${message}\n\nInstructions: Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát th√¢n thi·ªán v√† chuy√™n nghi·ªáp. S·ª≠ d·ª•ng d·ªØ li·ªáu th·ªùi gian th·ª±c ƒë·ªÉ ƒë∆∞a ra th√¥ng tin ch√≠nh x√°c nh·∫•t. N·∫øu c√≥ d·ªØ li·ªáu c·ª• th·ªÉ, h√£y tham kh·∫£o v√† tr√≠ch d·∫´n.`;

            const completion = await this.model.generateContent({
                contents: [{
                    role: 'user',
                    parts: [{ text: enhancedPrompt }]
                }],
                generationConfig: {
                    temperature: 0.7,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 2048,
                }
            });

            const response = completion.response;
            let responseText = response.text();

            // Clean and validate response
            responseText = this.cleanResponse(responseText);

            console.log('‚úÖ Enhanced chat response generated successfully');

            return {
                text: responseText,
                type: 'enhanced_chat_with_database',
                model: 'gemini-1.5-flash',
                databaseIntegrated: true,
                hasSpecificData: !!specificData
            };

        } catch (error) {
            console.error('‚ùå Error generating enhanced chat response:', error);
            return {
                text: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p l√∫c n√†y. Vui l√≤ng th·ª≠ h·ªèi c√¢u kh√°c ho·∫∑c li√™n h·ªá hotline 0865.124.996.",
                type: 'error',
                error: error.message
            };
        }
    }

    // ‚úÖ HANDLE SPECIFIC DATABASE QUERIES
    async handleSpecificQueries(message) {
        const lowerMessage = message.toLowerCase();
        let specificData = '';

        try {
            // ‚úÖ ROOM QUERIES
            if (lowerMessage.includes('ph√≤ng s·ªë') || lowerMessage.includes('room number')) {
                const roomNumberMatch = message.match(/ph√≤ng s·ªë (\w+)|room number (\w+)/i);
                if (roomNumberMatch) {
                    const roomNumber = roomNumberMatch[1] || roomNumberMatch[2];
                    const room = await this.contextManager.getRoomByNumber(roomNumber);
                    if (room) {
                        specificData += `üè® TH√îNG TIN PH√íNG ${roomNumber}:\n`;
                        specificData += `- Lo·∫°i ph√≤ng: ${room.TypeName || 'N/A'}\n`;
                        specificData += `- T·∫ßng: ${room.Floor}\n`;
                        specificData += `- S·ª©c ch·ª©a: ${room.Capacity} ng∆∞·ªùi\n`;
                        specificData += `- Gi√° hi·ªán t·∫°i: ${room.CurrentPrice?.toLocaleString('vi-VN')}ƒë/ƒë√™m\n`;
                        specificData += `- Tr·∫°ng th√°i: ${room.Status}\n`;
                        if (room.Description) specificData += `- M√¥ t·∫£: ${room.Description}\n`;
                        specificData += `\n`;
                    }
                }
            }

            // ‚úÖ PROMOTION QUERIES
            if (lowerMessage.includes('khuy·∫øn m√£i') || lowerMessage.includes('promotion')) {
                const promotionMatch = message.match(/khuy·∫øn m√£i (.+)|promotion (.+)/i);
                if (promotionMatch) {
                    const promotionName = promotionMatch[1] || promotionMatch[2];
                    const promotion = await this.contextManager.getPromotionByName(promotionName);
                    if (promotion) {
                        specificData += `üéÅ TH√îNG TIN KHUY·∫æN M√ÉI "${promotion.PromotionName}":\n`;
                        specificData += `- Gi·∫£m gi√°: ${promotion.DiscountPercent}%\n`;
                        if (promotion.StartDate) {
                            specificData += `- B·∫Øt ƒë·∫ßu: ${new Date(promotion.StartDate).toLocaleDateString('vi-VN')}\n`;
                        }
                        if (promotion.EndDate) {
                            specificData += `- K·∫øt th√∫c: ${new Date(promotion.EndDate).toLocaleDateString('vi-VN')}\n`;
                        }
                        if (promotion.Description) specificData += `- M√¥ t·∫£: ${promotion.Description}\n`;
                        specificData += `\n`;
                    }
                }
            }

            // ‚úÖ SERVICE QUERIES
            if (lowerMessage.includes('d·ªãch v·ª•') || lowerMessage.includes('service')) {
                const serviceMatch = message.match(/d·ªãch v·ª• (.+)|service (.+)/i);
                if (serviceMatch) {
                    const serviceName = serviceMatch[1] || serviceMatch[2];
                    const service = await this.contextManager.getServiceByName(serviceName);
                    if (service) {
                        specificData += `üõéÔ∏è TH√îNG TIN D·ªäCH V·ª§ "${service.ServiceName}":\n`;
                        if (service.Price) specificData += `- Gi√°: ${service.Price.toLocaleString('vi-VN')}ƒë\n`;
                        if (service.Category) specificData += `- Danh m·ª•c: ${service.Category}\n`;
                        if (service.Duration) specificData += `- Th·ªùi gian: ${service.Duration} ph√∫t\n`;
                        if (service.MaxCapacity) specificData += `- S·ª©c ch·ª©a: ${service.MaxCapacity} ng∆∞·ªùi\n`;
                        if (service.Description) specificData += `- M√¥ t·∫£: ${service.Description}\n`;
                        specificData += `\n`;
                    }
                }
            }

            // ‚úÖ OCCUPANCY QUERIES
            if (lowerMessage.includes('t·ª∑ l·ªá l·∫•p ƒë·∫ßy') || lowerMessage.includes('occupancy') || 
                lowerMessage.includes('t√¨nh tr·∫°ng ph√≤ng') || lowerMessage.includes('room status')) {
                const occupancyStats = this.contextManager.dataCache.occupancyStats;
                if (occupancyStats && Object.keys(occupancyStats).length > 0) {
                    specificData += `üìä T√åNH TR·∫†NG PH√íNG CHI TI·∫æT:\n`;
                    specificData += `- T·ªïng s·ªë ph√≤ng: ${occupancyStats.totalRooms}\n`;
                    specificData += `- Ph√≤ng tr·ªëng: ${occupancyStats.availableRooms} (${Math.round((occupancyStats.availableRooms/occupancyStats.totalRooms)*100)}%)\n`;
                    specificData += `- ƒêang s·ª≠ d·ª•ng: ${occupancyStats.occupiedRooms} ph√≤ng\n`;
                    specificData += `- ƒê√£ ƒë·∫∑t tr∆∞·ªõc: ${occupancyStats.reservedRooms} ph√≤ng\n`;
                    specificData += `- ƒêang b·∫£o tr√¨: ${occupancyStats.maintenanceRooms} ph√≤ng\n`;
                    specificData += `- T·ª∑ l·ªá l·∫•p ƒë·∫ßy: ${occupancyStats.occupancyRate}%\n`;
                    specificData += `\n`;
                }
            }

            // ‚úÖ USER ROLE QUERIES
            if (lowerMessage.includes('quy·ªÅn h·∫°n') || lowerMessage.includes('role') || 
                lowerMessage.includes('ph√¢n quy·ªÅn') || lowerMessage.includes('nh√¢n s·ª±')) {
                const roleStats = await this.contextManager.getUserRoleStats();
                if (roleStats && roleStats.length > 0) {
                    specificData += `üë• TH·ªêNG K√ä PH√ÇN QUY·ªÄN H·ªÜ TH·ªêNG:\n`;
                    roleStats.forEach(role => {
                        specificData += `- ${role.RoleName}: ${role.UserCount} ng∆∞·ªùi`;
                        if (role.Description) specificData += ` (${role.Description})`;
                        specificData += `\n`;
                    });
                    specificData += `\n`;
                }
            }

            return specificData || null;

        } catch (error) {
            console.error('‚ùå Error handling specific queries:', error);
            return null;
        }
    }

    // ‚úÖ ENHANCED QUICK REPLIES BASED ON MESSAGE CONTENT
    getQuickReplies(intent, message = '') {
        const lowerMessage = message.toLowerCase();
        
        // ‚úÖ CONTEXT-AWARE QUICK REPLIES
        if (lowerMessage.includes('ph√≤ng') || lowerMessage.includes('room')) {
            return [
                'üè® T√¨nh tr·∫°ng t·∫•t c·∫£ ph√≤ng',
                'üõèÔ∏è Ph√≤ng tr·ªëng h√¥m nay', 
                'üí∞ B·∫£ng gi√° ph√≤ng',
                'üîç T√¨m ph√≤ng theo lo·∫°i'
            ];
        }
        
        if (lowerMessage.includes('khuy·∫øn m√£i') || lowerMessage.includes('promotion')) {
            return [
                'üéÅ Khuy·∫øn m√£i ƒëang c√≥',
                'üíØ ∆Øu ƒë√£i sinh vi√™n',
                'üéÇ Khuy·∫øn m√£i sinh nh·∫≠t',
                'üìÖ G√≥i cu·ªëi tu·∫ßn'
            ];
        }
        
        if (lowerMessage.includes('d·ªãch v·ª•') || lowerMessage.includes('service')) {
            return [
                'üõéÔ∏è T·∫•t c·∫£ d·ªãch v·ª•',
                'üçΩÔ∏è Nh√† h√†ng & Bar',
                'üíÜ Spa & Massage',
                'üèä H·ªì b∆°i & Gym'
            ];
        }
        
        if (lowerMessage.includes('booking') || lowerMessage.includes('ƒë·∫∑t ph√≤ng')) {
            return [
                'üìÖ ƒê·∫∑t ph√≤ng online',
                'üìû G·ªçi ƒë·ªÉ ƒë·∫∑t ph√≤ng',
                'üí≥ H√¨nh th·ª©c thanh to√°n',
                'üìã Ch√≠nh s√°ch h·ªßy'
            ];
        }
        
        if (lowerMessage.includes('th·ªëng k√™') || lowerMessage.includes('b√°o c√°o')) {
            return [
                'üìä T·ª∑ l·ªá l·∫•p ƒë·∫ßy',
                'üí∞ Doanh thu h√¥m nay',
                'üë• S·ªë l∆∞·ª£ng kh√°ch',
                'üèÜ Ph√≤ng ph·ªï bi·∫øn'
            ];
        }

        // ‚úÖ DEFAULT ENHANCED QUICK REPLIES
        const quickReplies = {
            hotel_prompt: [
                "üìù Vi·∫øt email ƒë·∫∑t ph√≤ng", 
                "üè® M√¥ t·∫£ d·ªãch v·ª• kh√°ch s·∫°n", 
                "üìä So s√°nh lo·∫°i ph√≤ng", 
                "üéØ L·∫≠p k·∫ø ho·∫°ch ngh·ªâ d∆∞·ª°ng"
            ],
            direct_prompt: [
                "üå§Ô∏è Th·ªùi ti·∫øt H√† N·ªôi",
                "üó∫Ô∏è H∆∞·ªõng d·∫´n tham quan",
                "üçú M√≥n ƒÉn ƒë·∫∑c s·∫£n",
                "üöó Ph∆∞∆°ng ti·ªán di chuy·ªÉn"
            ],
            booking: ["üõèÔ∏è Xem ph√≤ng tr·ªëng", "üí∞ B√°o gi√° h√¥m nay", "üì± ƒê·∫∑t online", "üéÅ ∆Øu ƒë√£i hi·ªán t·∫°i"],
            pricing: ["üìã B·∫£ng gi√° chi ti·∫øt", "üè∑Ô∏è Khuy·∫øn m√£i ƒë·∫∑c bi·ªát", "üîÑ So s√°nh ph√≤ng", "üí≥ Thanh to√°n"],
            general: [
                "üõèÔ∏è T√¨nh tr·∫°ng ph√≤ng", 
                "üí∞ Xem b·∫£ng gi√°", 
                "üéÅ Khuy·∫øn m√£i hot",
                "üìä Th·ªëng k√™ kh√°ch s·∫°n"
            ]
        };
        
        return quickReplies[intent] || quickReplies.general;
    }

    // ‚úÖ ENHANCED DIRECT PROMPT HANDLING
    async handleDirectPrompt(prompt, conversationHistory = []) {
        try {
            console.log('üîÑ Processing enhanced direct prompt:', prompt.substring(0, 100) + '...');
            
            const dynamicContext = await this.contextManager.buildDynamicContext();
            const hotelContext = this.contextManager.getHotelContext();
            const localContext = this.contextManager.getLocalContext();
            
            const currentTime = new Date().toLocaleString('vi-VN');
            const randomId = Math.random().toString(36).substr(2, 9);
            
            // ‚úÖ ADD SPECIFIC DATA FOR PROMPT
            const specificData = await this.handleSpecificQueries(prompt);
            
            let fullContext = `
            B·∫°n l√† AI Assistant chuy√™n gia v·ªÅ Hotel HUB v√† khu v·ª±c H√† N·ªôi v·ªõi quy·ªÅn truy c·∫≠p to√†n b·ªô d·ªØ li·ªáu kh√°ch s·∫°n.
            
            ‚è∞ TH·ªúI GIAN HI·ªÜN T·∫†I: ${currentTime}
            üÜî Session ID: ${randomId}
            
            ${hotelContext}
            ${localContext}
            ${dynamicContext}
            `;
            
            if (specificData) {
                fullContext += `\n\nüîç D·ªÆ LI·ªÜU C·ª§ TH·ªÇ:\n${specificData}\n`;
            }
            
            // Add conversation history
            fullContext += `\nüìö L·ªäCH S·ª¨ H·ªòI THO·∫†I G·∫¶N ƒê√ÇY:\n`;
            const recentHistory = conversationHistory.slice(-6);
            recentHistory.forEach((msg) => {
                const role = msg.role === 'user' ? 'üë§ Kh√°ch h√†ng' : 'ü§ñ Hotel Assistant';
                fullContext += `${role}: ${msg.content.substring(0, 100)}...\n`;
            });
            
            fullContext += `\nüéØ Y√äU C·∫¶U PROMPT HI·ªÜN T·∫†I:\nüë§ Kh√°ch h√†ng: "${prompt}"\n\nü§ñ Hotel HUB Expert v·ªõi to√†n b·ªô d·ªØ li·ªáu th·ªùi gian th·ª±c (${currentTime}):`;

            const result = await this.model.generateContent(fullContext, {
                generationConfig: {
                    temperature: 0.9,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 2048,
                    candidateCount: 1,
                }
            });
            
            const response = await result.response;
            const text = response.text();

            console.log(`‚úÖ Enhanced direct prompt response generated at ${currentTime}`);

            const cleanedText = text
                .replace(/^ü§ñ\s*(Tr·ª£ l√Ω|Assistant)?:?\s*/i, '')
                .replace(/^\s*-\s*/, '')
                .trim();

            return {
                success: true,
                response: cleanedText,
                timestamp: new Date().toISOString(),
                model: 'gemini-1.5-flash-enhanced',
                promptType: 'hotel_database_prompt',
                originalPrompt: prompt.substring(0, 100) + (prompt.length > 100 ? '...' : ''),
                sessionId: randomId,
                processedAt: currentTime,
                hasSpecificData: !!specificData,
                databaseIntegrated: true
            };
        } catch (error) {
            console.error('‚ùå Enhanced direct prompt error:', error);
            
            return {
                success: false,
                response: `Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá hotline 0865.124.996 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp.`,
                error: error.message,
                timestamp: new Date().toISOString(),
                model: 'fallback',
                promptType: 'enhanced_direct_error'
            };
        }
    }

    // Keep existing methods: cleanResponse, getModelInfo
    cleanResponse(responseText) {
        if (typeof responseText !== 'string') {
            responseText = String(responseText || '');
        }

        responseText = responseText
            .replace(/```json/gi, '')
            .replace(/```/g, '')
            .replace(/^\{.*\}$/s, (match) => {
                try {
                    const parsed = JSON.parse(match);
                    return parsed.text || parsed.message || parsed.response || match;
                } catch {
                    return match;
                }
            })
            .trim();

        if (!responseText || responseText.length < 10) {
            responseText = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p l√∫c n√†y. Vui l√≤ng th·ª≠ h·ªèi c√¢u kh√°c ho·∫∑c li√™n h·ªá hotline 0865.124.996.";
        }

        return responseText;
    }

    getModelInfo() {
        return {
            name: 'Gemini 1.5 Flash Enhanced',
            version: '1.5',
            provider: 'Google AI',
            maxTokens: 2048,
            temperature: 0.7,
            hasValidApiKey: !!process.env.GOOGLE_AI_API_KEY,
            databaseIntegration: 'Full',
            capabilities: [
                'Vietnamese language support',
                'Full database integration',
                'Real-time hotel data',
                'Room management queries',
                'Booking statistics',
                'Promotion information',
                'Service details',
                'User role management',
                'Occupancy analytics',
                'Multi-turn conversation',
                'Intent recognition',
                'Quick replies generation',
                'Navigation assistance',
                'Specific data queries'
            ]
        };
    }
}

export default ResponseGenerator;