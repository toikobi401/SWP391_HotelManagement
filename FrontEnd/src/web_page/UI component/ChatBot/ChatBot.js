import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../../../contexts/AuthContext';
import { toast } from 'react-toastify';
import styles from './ChatBot.module.css';
import dotenv from 'dotenv';

const ChatBot = () => {
    const { user, hasRole } = useAuth(); // Get user context
    
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([]);
    const [inputMessage, setInputMessage] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [sessionId, setSessionId] = useState(null);
    const [modelInfo, setModelInfo] = useState(null);
    const [promptMode, setPromptMode] = useState(false);
    const [promptExamples, setPromptExamples] = useState(null);
    const [weatherInfo, setWeatherInfo] = useState(null);
    const [localAttractions, setLocalAttractions] = useState(null);
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);

    // ‚úÖ DETERMINE USER ROLE AND GET APPROPRIATE WELCOME MESSAGE
    const getUserRole = () => {
        if (!user) return 'guest';
        if (hasRole(1)) return 'manager';
        if (hasRole(2)) return 'receptionist';
        if (hasRole(3)) return 'customer';
        return 'customer'; // default
    };

    const getWelcomeMessage = () => {
        const role = getUserRole();
        
        const welcomeMessages = {
            guest: {
                text: "Xin ch√†o! T√¥i l√† Hotel HUB AI Assistant ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi Gemini 1.5 Flash. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n\nüè® Kh√°ch s·∫°n: ƒë·∫∑t ph√≤ng, gi√° c·∫£, d·ªãch v·ª•\nüå§Ô∏è Th·ªùi ti·∫øt: kh√≠ h·∫≠u H√† N·ªôi theo m√πa\nüó∫Ô∏è Du l·ªãch: ƒë·ªãa ƒëi·ªÉm tham quan, l·ªãch tr√¨nh\nüöó Di chuy·ªÉn: h∆∞·ªõng d·∫´n t·ª´ s√¢n bay, ph∆∞∆°ng ti·ªán\nüçú ·∫®m th·ª±c: m√≥n ngon ƒë·ªãa ph∆∞∆°ng\nüé≠ VƒÉn h√≥a: l·ªÖ h·ªôi, s·ª± ki·ªán\nüìù Prompt: vi·∫øt n·ªôi dung, ph√¢n t√≠ch, h∆∞·ªõng d·∫´n\n\n*T√¥i chuy√™n v·ªÅ Hotel HUB v√† khu v·ª±c H√† N·ªôi.*",
                quickReplies: ['üõèÔ∏è ƒê·∫∑t ph√≤ng', 'üå§Ô∏è Th·ªùi ti·∫øt', 'üó∫Ô∏è Tham quan', 'üìù AI Prompt']
            },
            customer: {
                text: `Xin ch√†o ${user?.Fullname || 'qu√Ω kh√°ch'}! üëã\n\nT√¥i l√† Hotel HUB AI Assistant d√†nh cho kh√°ch h√†ng. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n\nüè® **D·ªãch v·ª• kh√°ch h√†ng:**\n‚Ä¢ Th√¥ng tin ƒë·∫∑t ph√≤ng v√† gi√° c·∫£\n‚Ä¢ H∆∞·ªõng d·∫´n check-in/check-out\n‚Ä¢ D·ªãch v·ª• ph√≤ng v√† ti·ªán nghi\n‚Ä¢ Khuy·∫øn m√£i hi·ªán t·∫°i\n\nüå§Ô∏è **Du l·ªãch H√† N·ªôi:**\n‚Ä¢ Th·ªùi ti·∫øt theo m√πa\n‚Ä¢ ƒê·ªãa ƒëi·ªÉm tham quan\n‚Ä¢ ·∫®m th·ª±c ƒë·ªãa ph∆∞∆°ng\n‚Ä¢ H∆∞·ªõng d·∫´n di chuy·ªÉn\n\nüìù **AI Assistant:**\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch du l·ªãch\n‚Ä¢ T∆∞ v·∫•n l·ªãch tr√¨nh\n‚Ä¢ Vi·∫øt email, ƒë√°nh gi√°\n\n*Ch√∫c b·∫°n c√≥ k·ª≥ ngh·ªâ tuy·ªát v·ªùi t·∫°i Hotel HUB!* ‚ú®`,
                quickReplies: ['üõèÔ∏è ƒê·∫∑t ph√≤ng', 'üí∞ Khuy·∫øn m√£i', 'üå§Ô∏è Th·ªùi ti·∫øt', 'üó∫Ô∏è Tham quan', 'üìù AI Prompt']
            },
            receptionist: {
                text: `Xin ch√†o ${user?.Fullname || 'L·ªÖ t√¢n'}! üë®‚Äçüíº\n\nT√¥i l√† Hotel HUB AI Assistant d√†nh cho ƒë·ªôi ng≈© l·ªÖ t√¢n. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n\nüè® **Qu·∫£n l√Ω kh√°ch s·∫°n:**\n‚Ä¢ Th√¥ng tin ph√≤ng v√† t√¨nh tr·∫°ng\n‚Ä¢ Quy tr√¨nh check-in/check-out\n‚Ä¢ Gi√° ph√≤ng v√† ch√≠nh s√°ch\n‚Ä¢ X·ª≠ l√Ω y√™u c·∫ßu ƒë·∫∑c bi·ªát\n\nüë• **H·ªó tr·ª£ kh√°ch h√†ng:**\n‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch\n‚Ä¢ Th√¥ng tin d·ªãch v·ª• v√† ti·ªán nghi\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n‚Ä¢ Gi·∫£i quy·∫øt khi·∫øu n·∫°i\n\nüå§Ô∏è **Th√¥ng tin ƒë·ªãa ph∆∞∆°ng:**\n‚Ä¢ Th·ªùi ti·∫øt H√† N·ªôi\n‚Ä¢ ƒê·ªãa ƒëi·ªÉm tham quan\n‚Ä¢ Nh√† h√†ng v√† mua s·∫Øm\n‚Ä¢ Ph∆∞∆°ng ti·ªán di chuy·ªÉn\n\nüìù **C√¥ng c·ª• AI:**\n‚Ä¢ Vi·∫øt email cho kh√°ch\n‚Ä¢ T·∫°o h∆∞·ªõng d·∫´n\n‚Ä¢ Ph√¢n t√≠ch y√™u c·∫ßu\n‚Ä¢ Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ\n\n*Ch√∫c b·∫°n l√†m vi·ªác hi·ªáu qu·∫£!* üí™`,
                quickReplies: ['üè® Qu·∫£n l√Ω ph√≤ng', 'üë• H·ªó tr·ª£ kh√°ch', 'üå§Ô∏è Th·ªùi ti·∫øt', 'üìß Vi·∫øt email', 'üìù AI Prompt']
            },
            manager: {
                text: `Xin ch√†o ${user?.Fullname || 'Qu·∫£n l√Ω'}! üë®‚Äçüíº\n\nT√¥i l√† Hotel HUB AI Assistant d√†nh cho ban qu·∫£n l√Ω. Hi·ªán t·∫°i ƒëang trong giai ƒëo·∫°n ph√°t tri·ªÉn.\n\nüîß **T√≠nh nƒÉng s·∫Øp ra m·∫Øt:**\n‚Ä¢ B√°o c√°o kinh doanh\n‚Ä¢ Ph√¢n t√≠ch d·ªØ li·ªáu\n‚Ä¢ Qu·∫£n l√Ω nh√¢n s·ª±\n‚Ä¢ Chi·∫øn l∆∞·ª£c marketing\n\n*Vui l√≤ng s·ª≠ d·ª•ng ch·∫ø ƒë·ªô AI Prompt ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t hi·ªán t·∫°i.*`,
                quickReplies: ['üìù AI Prompt', 'üå§Ô∏è Th·ªùi ti·∫øt', 'üó∫Ô∏è Tham quan']
            }
        };

        return welcomeMessages[role] || welcomeMessages.guest;
    };

    const getPlaceholderText = () => {
        const role = getUserRole();
        
        if (promptMode) {
            return role === 'receptionist' 
                ? "Nh·∫≠p AI prompt cho l·ªÖ t√¢n... (qu·∫£n l√Ω ph√≤ng, h·ªó tr·ª£ kh√°ch, email)"
                : "Nh·∫≠p AI prompt... (kh√°ch s·∫°n, th·ªùi ti·∫øt, du l·ªãch HN)";
        }
        
        const placeholders = {
            guest: "H·ªèi v·ªÅ kh√°ch s·∫°n & H√† N·ªôi...",
            customer: "H·ªèi v·ªÅ ƒë·∫∑t ph√≤ng, d·ªãch v·ª•, du l·ªãch...",
            receptionist: "H·ªèi v·ªÅ qu·∫£n l√Ω ph√≤ng, h·ªó tr·ª£ kh√°ch h√†ng...",
            manager: "S·ª≠ d·ª•ng AI Prompt ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t..."
        };
        
        return placeholders[role] || placeholders.guest;
    };

    const getChatBotTitle = () => {
        const role = getUserRole();
        
        const titles = {
            guest: "Hotel HUB Assistant",
            customer: "Kh√°ch h√†ng Support",
            receptionist: "L·ªÖ t√¢n Assistant", 
            manager: "Qu·∫£n l√Ω Assistant"
        };
        
        return titles[role] || titles.guest;
    };

    const getStatusText = () => {
        const role = getUserRole();
        
        if (promptMode) return 'ü§ñ AI Prompt Mode';
        
        const statusTexts = {
            guest: modelInfo ? `${modelInfo.name} ‚Ä¢ üè® Hanoi Expert` : 'üè® Hanoi Expert',
            customer: 'üë§ Kh√°ch h√†ng ‚Ä¢ Hotel HUB',
            receptionist: 'üë®‚Äçüíº L·ªÖ t√¢n ‚Ä¢ Hotel HUB',
            manager: 'üëî Qu·∫£n l√Ω ‚Ä¢ Hotel HUB'
        };
        
        return statusTexts[role] || statusTexts.guest;
    };

    // ‚úÖ INITIALIZE WITH ROLE-BASED WELCOME MESSAGE
    useEffect(() => {
        const welcomeMsg = getWelcomeMessage();
        setMessages([{
            id: 1,
            text: welcomeMsg.text,
            sender: 'bot',
            timestamp: new Date().toISOString(),
            quickReplies: welcomeMsg.quickReplies
        }]);
    }, [user]); // Re-initialize when user changes

    // ‚úÖ FETCH EXPANDED DATA ON MOUNT
    useEffect(() => {
        const fetchExpandedData = async () => {
            try {
                // Fetch prompt examples
                const promptResponse = await fetch('http://localhost:3000/api/chatbot/prompt-examples');
                if (promptResponse.ok) {
                    const promptData = await promptResponse.json();
                    setPromptExamples(promptData.examples);
                }

                // Fetch weather info
                const weatherResponse = await fetch('http://localhost:3000/api/chatbot/weather-info');
                if (weatherResponse.ok) {
                    const weatherData = await weatherResponse.json();
                    setWeatherInfo(weatherData.weatherInfo);
                }

                // Fetch local attractions
                const attractionsResponse = await fetch('http://localhost:3000/api/chatbot/local-attractions');
                if (attractionsResponse.ok) {
                    const attractionsData = await attractionsResponse.json();
                    setLocalAttractions(attractionsData.attractions);
                }
            } catch (error) {
                console.error('Error fetching expanded data:', error);
            }
        };

        fetchExpandedData();
    }, []);

    // ‚úÖ FETCH MODEL INFO ON MOUNT
    useEffect(() => {
        const fetchModelInfo = async () => {
            try {
                const response = await fetch('http://localhost:3000/api/chatbot/model-info');
                if (response.ok) {
                    const data = await response.json();
                    setModelInfo(data.modelInfo);
                }
            } catch (error) {
                console.error('Error fetching model info:', error);
            }
        };

        fetchModelInfo();
    }, []);

    // Auto scroll to bottom
    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    // Focus input when chat opens
    useEffect(() => {
        if (isOpen && inputRef.current) {
            inputRef.current.focus();
        }
    }, [isOpen]);

    const toggleChat = () => {
        setIsOpen(!isOpen);
    };

    // ‚úÖ ENHANCED SEND MESSAGE WITH ROLE CONTEXT
    const sendMessage = async (messageText = null, isPrompt = false) => {
        const text = messageText || inputMessage.trim();
        if (!text) return;

        const timestamp = Date.now();
        const cacheBreaker = Math.random().toString(36).substr(2, 9);
        const userRole = getUserRole();

        // ‚úÖ VALIDATE MESSAGE LENGTH
        const maxLength = isPrompt || promptMode ? 2000 : 1000;
        if (text.length > maxLength) {
            const errorMessage = {
                id: Date.now() + 1,
                text: `${isPrompt ? 'Prompt' : 'Tin nh·∫Øn'} qu√° d√†i! Vui l√≤ng vi·∫øt ng·∫Øn g·ªçn h∆°n (t·ªëi ƒëa ${maxLength} k√Ω t·ª±). üìù`,
                sender: 'bot',
                timestamp: new Date().toISOString(),
                isError: true
            };
            setMessages(prev => [...prev, errorMessage]);
            return;
        }

        const userMessage = {
            id: timestamp,
            text: text,
            sender: 'user',
            timestamp: new Date().toISOString(),
            isPrompt: isPrompt || promptMode
        };

        setMessages(prev => [...prev, userMessage]);
        setInputMessage('');
        setIsTyping(true);

        try {
            console.log('üîç Sending message to chatbot with role context...');

            // ‚úÖ AUTO-DETECT PROMPT MODE FOR WEATHER/LOCAL QUERIES
            const isWeatherOrLocalQuery = 
                text.toLowerCase().includes('th·ªùi ti·∫øt') ||
                text.toLowerCase().includes('h∆∞·ªõng d·∫´n') ||
                text.toLowerCase().includes('chu·∫©n b·ªã') ||
                text.toLowerCase().includes('weather') ||
                text.toLowerCase().includes('climate') ||
                text.toLowerCase().includes('prepare') ||
                text.toLowerCase().includes('h√† n·ªôi') ||
                text.toLowerCase().includes('h√≤a l·∫°c') ||
                text.toLowerCase().includes('nhi·ªát ƒë·ªô') ||
                text.toLowerCase().includes('m∆∞a') ||
                text.toLowerCase().includes('n·∫Øng') ||
                text.toLowerCase().includes('l·∫°nh') ||
                text.toLowerCase().includes('n√≥ng') ||
                text.toLowerCase().includes('kh√≠ h·∫≠u') ||
                text.toLowerCase().includes('m√πa');

            // ‚úÖ CHOOSE ENDPOINT BASED ON MODE OR CONTENT
            const endpoint = (isPrompt || promptMode || isWeatherOrLocalQuery) ? 'prompt' : 'chat';
            const bodyField = (isPrompt || promptMode || isWeatherOrLocalQuery) ? 'prompt' : 'message';
            
            console.log('üîç Sending message:', {
                text: text.substring(0, 50) + '...',
                endpoint: endpoint,
                bodyField: bodyField,
                userRole: userRole,
                isWeatherOrLocalQuery: isWeatherOrLocalQuery,
                promptMode: promptMode,
                timestamp: timestamp,
                cacheBreaker: cacheBreaker
            });
            
            // ‚úÖ REQUEST BODY WITH ROLE CONTEXT
            const requestBody = {
                [bodyField]: text,
                sessionId: sessionId || `session_${timestamp}`,
                userRole: userRole, // Add user role context
                userId: user?.UserID || null,
                userName: user?.Fullname || 'Guest',
                timestamp: timestamp,
                cacheBreaker: cacheBreaker
            };
            
            console.log('üì§ Request body:', requestBody);
            
            // ‚úÖ SEND REQUEST
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 30000);
            
            const response = await fetch(`http://localhost:3000/api/chatbot/${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üì® ChatBot response:', data);

            if (data.success) {
                // Save sessionId if provided
                if (data.sessionId && !sessionId) {
                    setSessionId(data.sessionId);
                }

                const botMessage = {
                    id: Date.now() + 1,
                    text: data.message || data.response || 'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n.',
                    sender: 'bot',
                    timestamp: new Date().toISOString(),
                    quickReplies: data.quickReplies || [],
                    isPromptResponse: isPrompt || promptMode || data.isPromptResponse,
                    model: data.model,
                    intent: data.intent
                };

                setMessages(prev => [...prev, botMessage]);
            } else {
                throw new Error(data.error || 'Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server');
            }

        } catch (error) {
            console.error('‚ùå ChatBot error:', error);
            
            let errorMessage = 'ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi AI Assistant.';
            let quickReplies = ['üîÑ Th·ª≠ l·∫°i', 'üåê Ki·ªÉm tra k·∫øt n·ªëi'];

            if (error.name === 'AbortError') {
                errorMessage = 'Y√™u c·∫ßu ƒë√£ h·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i v·ªõi tin nh·∫Øn ng·∫Øn h∆°n.';
            } else if (error.message.includes('429')) {
                errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng ch·ªù m·ªôt ch√∫t r·ªìi th·ª≠ l·∫°i.';
                quickReplies = ['‚è∞ Th·ª≠ l·∫°i sau', 'üìû Li√™n h·ªá h·ªó tr·ª£'];
            } else if (error.message.includes('500')) {
                errorMessage = 'L·ªói h·ªá th·ªëng AI. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.';
                quickReplies = ['üîÑ Th·ª≠ l·∫°i', 'üìû G·ªçi hotline', 'üìß G·ª≠i email'];
            }

            const errorBotMessage = {
                id: Date.now() + 2,
                text: `‚ùå ${errorMessage}\n\nüí° G·ª£i √Ω:\n‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet\n‚Ä¢ Th·ª≠ v·ªõi tin nh·∫Øn ng·∫Øn h∆°n\n‚Ä¢ Li√™n h·ªá h·ªó tr·ª£: 0865.124.996`,
                sender: 'bot',
                timestamp: new Date().toISOString(),
                isError: true,
                quickReplies: quickReplies
            };

            setMessages(prev => [...prev, errorBotMessage]);
        } finally {
            setIsTyping(false);
        }
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };

    // ‚úÖ ENHANCED HANDLE QUICK REPLY WITH ROLE-BASED RESPONSES
    const handleQuickReply = (reply) => {
        const userRole = getUserRole();
        
        // ‚úÖ ROLE-SPECIFIC QUICK REPLIES
        if (userRole === 'receptionist') {
            // Receptionist-specific quick replies
            if (reply === 'üè® Qu·∫£n l√Ω ph√≤ng') {
                sendMessage('Cho t√¥i th√¥ng tin v·ªÅ t√¨nh tr·∫°ng ph√≤ng hi·ªán t·∫°i, c√°ch qu·∫£n l√Ω check-in/check-out v√† quy tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu ƒë·∫∑c bi·ªát c·ªßa kh√°ch.', true);
                return;
            }
            
            if (reply === 'üë• H·ªó tr·ª£ kh√°ch') {
                sendMessage('H∆∞·ªõng d·∫´n t√¥i c√°ch tr·∫£ l·ªùi c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p c·ªßa kh√°ch, x·ª≠ l√Ω khi·∫øu n·∫°i v√† cung c·∫•p th√¥ng tin d·ªãch v·ª• m·ªôt c√°ch chuy√™n nghi·ªáp.', true);
                return;
            }
            
            if (reply === 'üìß Vi·∫øt email') {
                sendMessage('Gi√∫p t√¥i vi·∫øt email chuy√™n nghi·ªáp ƒë·ªÉ tr·∫£ l·ªùi kh√°ch h√†ng v·ªÅ ƒë·∫∑t ph√≤ng, x√°c nh·∫≠n booking, ho·∫∑c gi·∫£i quy·∫øt khi·∫øu n·∫°i.', true);
                return;
            }
        }

        // ‚úÖ HANDLE CONNECTION CHECK
        if (reply === 'üåê Ki·ªÉm tra k·∫øt n·ªëi') {
            checkConnection();
            return;
        }

        // ‚úÖ HANDLE FIX GUIDE
        if (reply === 'üîß H∆∞·ªõng d·∫´n fix') {
            const fixGuideMessage = {
                id: Date.now(),
                text: "üîß **H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C S·ª∞ C·ªê:**\n\n1Ô∏è‚É£ **Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng**\n‚Ä¢ Wifi/4G ·ªïn ƒë·ªãnh\n‚Ä¢ T·ªëc ƒë·ªô > 1Mbps\n\n2Ô∏è‚É£ **L√†m m·ªõi tr√¨nh duy·ªát**\n‚Ä¢ Ctrl+F5 (Windows)\n‚Ä¢ Cmd+R (Mac)\n\n3Ô∏è‚É£ **X√≥a cache**\n‚Ä¢ Settings > Privacy > Clear Data\n\n4Ô∏è‚É£ **Th·ª≠ tr√¨nh duy·ªát kh√°c**\n‚Ä¢ Chrome, Firefox, Safari\n\n5Ô∏è‚É£ **Li√™n h·ªá h·ªó tr·ª£**\n‚Ä¢ Hotline: 0865.124.996\n‚Ä¢ Email: datltthe194235@gmail.com",
                sender: 'bot',
                timestamp: new Date().toISOString(),
                quickReplies: ['üåê Test l·∫°i', 'üìû G·ªçi hotline', 'üìß G·ª≠i email']
            };
            setMessages(prev => [...prev, fixGuideMessage]);
            return;
        }

        // ‚úÖ HANDLE TEST CONNECTION
        if (reply === 'üåê Test l·∫°i') {
            checkConnection();
            return;
        }

        // ‚úÖ HANDLE AI PROMPT MODE TOGGLE
        if (reply === 'üìù AI Prompt') {
            setPromptMode(true);
            const promptModeMessage = {
                id: Date.now(),
                text: `ü§ñ **ƒê√É B·∫¨T CH·∫æ ƒê·ªò AI PROMPT**\n\nB·∫°n c√≥ th·ªÉ y√™u c·∫ßu AI:\n${
                    userRole === 'receptionist' 
                        ? '‚Ä¢ Vi·∫øt email chuy√™n nghi·ªáp cho kh√°ch\n‚Ä¢ T·∫°o h∆∞·ªõng d·∫´n check-in/check-out\n‚Ä¢ Ph√¢n t√≠ch y√™u c·∫ßu kh√°ch h√†ng\n‚Ä¢ So·∫°n th·∫£o th√¥ng b√°o kh√°ch s·∫°n\n‚Ä¢ X·ª≠ l√Ω khi·∫øu n·∫°i v√† ph·∫£n h·ªìi\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch d·ªãch v·ª•\n\nüíº *Ch·∫ø ƒë·ªô chuy√™n nghi·ªáp cho l·ªÖ t√¢n*'
                        : '‚Ä¢ Vi·∫øt email, th∆∞, m√¥ t·∫£, review\n‚Ä¢ Ph√¢n t√≠ch th·ªùi ti·∫øt, ƒë·ªãa ƒëi·ªÉm\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch du l·ªãch\n‚Ä¢ T·∫°o l·ªãch tr√¨nh tham quan\n‚Ä¢ H∆∞·ªõng d·∫´n di chuy·ªÉn\n‚Ä¢ So s√°nh d·ªãch v·ª•\n\n‚ú® *Ch·∫ø ƒë·ªô AI s√°ng t·∫°o v√† ph√¢n t√≠ch*'
                }`,
                sender: 'bot',
                timestamp: new Date().toISOString(),
                quickReplies: userRole === 'receptionist' 
                    ? ['üìß Email kh√°ch', 'üìã H∆∞·ªõng d·∫´n', 'üéØ Ph√¢n t√≠ch', 'üîô Chat th∆∞·ªùng']
                    : ['üìù Vi·∫øt n·ªôi dung', 'üå§Ô∏è Ph√¢n t√≠ch th·ªùi ti·∫øt', 'üó∫Ô∏è L·∫≠p k·∫ø ho·∫°ch', 'üîô Chat th∆∞·ªùng']
            };
            setMessages(prev => [...prev, promptModeMessage]);
            return;
        }

        // ‚úÖ HANDLE WEATHER QUICK REPLY  
        if (reply === 'üå§Ô∏è Th·ªùi ti·∫øt') {
            if (weatherInfo) {
                const weatherMessage = generateWeatherMessage();
                const weatherBotMessage = {
                    id: Date.now(),
                    text: weatherMessage,
                    sender: 'bot',
                    timestamp: new Date().toISOString(),
                    quickReplies: ['üå§Ô∏è H√¥m nay', 'üìÖ Theo m√πa', 'üëï Chu·∫©n b·ªã g√¨', 'üóìÔ∏è Th·ªùi ƒëi·ªÉm ƒë·∫πp']
                };
                setMessages(prev => [...prev, weatherBotMessage]);
            } else {
                sendMessage('Cho t√¥i th√¥ng tin th·ªùi ti·∫øt H√† N·ªôi hi·ªán t·∫°i v√† theo m√πa, c√πng l·ªùi khuy√™n chu·∫©n b·ªã g√¨ khi ƒë·∫øn kh√°ch s·∫°n.', true);
            }
            return;
        }

        // ‚úÖ HANDLE ATTRACTIONS QUICK REPLY
        if (reply === 'üó∫Ô∏è Tham quan') {
            if (localAttractions) {
                const attractionsMessage = generateAttractionsMessage();
                const attractionsBotMessage = {
                    id: Date.now(),
                    text: attractionsMessage,
                    sender: 'bot',
                    timestamp: new Date().toISOString(),
                    quickReplies: ['üèõÔ∏è Ch√πa H∆∞∆°ng', 'üå≤ Ba V√¨', 'üèÆ Ph·ªë C·ªï', 'üöó H∆∞·ªõng d·∫´n ƒëi']
                };
                setMessages(prev => [...prev, attractionsBotMessage]);
            } else {
                sendMessage('Gi·ªõi thi·ªáu cho t√¥i c√°c ƒë·ªãa ƒëi·ªÉm tham quan g·∫ßn Hotel HUB v√† trung t√¢m H√† N·ªôi, c√πng c√°ch di chuy·ªÉn.', true);
            }
            return;
        }

        // ‚úÖ HANDLE EXPANDED PROMPT CATEGORY SELECTION
        if (reply.startsWith('üìù ') || reply.startsWith('üå§Ô∏è ') || reply.startsWith('üó∫Ô∏è ')) {
            setPromptMode(true);
            let promptText = '';
            
            if (reply.includes('Vi·∫øt n·ªôi dung')) {
                promptText = 'Gi√∫p t√¥i vi·∫øt n·ªôi dung marketing cho kh√°ch s·∫°n, email kh√°ch h√†ng, ho·∫∑c m√¥ t·∫£ d·ªãch v·ª• chuy√™n nghi·ªáp.';
            } else if (reply.includes('Ph√¢n t√≠ch th·ªùi ti·∫øt')) {
                promptText = 'Ph√¢n t√≠ch th·ªùi ti·∫øt H√† N·ªôi theo m√πa v√† ƒë∆∞a ra l·ªùi khuy√™n chu·∫©n b·ªã cho kh√°ch du l·ªãch.';
            } else if (reply.includes('L·∫≠p k·∫ø ho·∫°ch')) {
                promptText = 'Gi√∫p t√¥i l·∫≠p k·∫ø ho·∫°ch du l·ªãch H√† N·ªôi 2-3 ng√†y, bao g·ªìm l·ªãch tr√¨nh, ƒë·ªãa ƒëi·ªÉm, ƒÉn u·ªëng.';
            } else if (reply.includes('Email kh√°ch')) {
                promptText = 'Vi·∫øt email chuy√™n nghi·ªáp tr·∫£ l·ªùi kh√°ch h√†ng v·ªÅ ƒë·∫∑t ph√≤ng, x√°c nh·∫≠n booking, ho·∫∑c gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ.';
            } else if (reply.includes('H∆∞·ªõng d·∫´n')) {
                promptText = 'T·∫°o h∆∞·ªõng d·∫´n chi ti·∫øt cho quy tr√¨nh check-in/check-out v√† c√°c d·ªãch v·ª• kh√°ch s·∫°n.';
            } else if (reply.includes('Ph√¢n t√≠ch')) {
                promptText = 'Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa kh√°ch h√†ng v√† ƒë∆∞a ra gi·∫£i ph√°p ph√π h·ª£p.';
            }
            
            sendMessage(promptText, true);
            return;
        }

        // ‚úÖ HANDLE WEATHER SPECIFIC QUERIES
        if (['üå§Ô∏è H√¥m nay', 'üìÖ Theo m√πa', 'üëï Chu·∫©n b·ªã g√¨', 'üóìÔ∏è Th·ªùi ƒëi·ªÉm ƒë·∫πp'].includes(reply)) {
            const weatherPrompts = {
                'üå§Ô∏è H√¥m nay': 'Th·ªùi ti·∫øt H√† N·ªôi h√¥m nay nh∆∞ th·∫ø n√†o? Nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, c√≥ m∆∞a kh√¥ng?',
                'üìÖ Theo m√πa': 'Kh√≠ h·∫≠u H√† N·ªôi thay ƒë·ªïi nh∆∞ th·∫ø n√†o theo t·ª´ng m√πa trong nƒÉm?',
                'üëï Chu·∫©n b·ªã g√¨': 'Du kh√°ch n√™n chu·∫©n b·ªã trang ph·ª•c v√† ƒë·ªì d√πng g√¨ cho th·ªùi ti·∫øt H√† N·ªôi?',
                'üóìÔ∏è Th·ªùi ƒëi·ªÉm ƒë·∫πp': 'Th·ªùi ƒëi·ªÉm n√†o trong nƒÉm l√† l√Ω t∆∞·ªüng nh·∫•t ƒë·ªÉ du l·ªãch H√† N·ªôi?'
            };
            sendMessage(weatherPrompts[reply], true);
            return;
        }

        // ‚úÖ HANDLE ATTRACTIONS SPECIFIC QUERIES
        if (['üèõÔ∏è Ch√πa H∆∞∆°ng', 'üå≤ Ba V√¨', 'üèÆ Ph·ªë C·ªï', 'üöó H∆∞·ªõng d·∫´n ƒëi'].includes(reply)) {
            const attractionPrompts = {
                'üèõÔ∏è Ch√πa H∆∞∆°ng': 'H∆∞·ªõng d·∫´n chi ti·∫øt ƒëi Ch√πa H∆∞∆°ng t·ª´ Hotel HUB, th·ªùi gian, chi ph√≠ v√† l∆∞u √Ω.',
                'üå≤ Ba V√¨': 'Th√¥ng tin du l·ªãch Ba V√¨ t·ª´ H√≤a L·∫°c, c√°c ho·∫°t ƒë·ªông v√† ƒë·ªãa ƒëi·ªÉm tham quan.',
                'üèÆ Ph·ªë C·ªï': 'L·ªãch tr√¨nh tham quan Ph·ªë C·ªï H√† N·ªôi, m√≥n ƒÉn ƒë·∫∑c s·∫£n v√† c√°ch di chuy·ªÉn.',
                'üöó H∆∞·ªõng d·∫´n ƒëi': 'H∆∞·ªõng d·∫´n c√°c ph∆∞∆°ng ti·ªán di chuy·ªÉn t·ª´ Hotel HUB ƒë·∫øn c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng.'
            };
            sendMessage(attractionPrompts[reply], true);
            return;
        }

        // ‚úÖ HANDLE BACK TO NORMAL CHAT
        if (reply === 'üîô Chat th∆∞·ªùng') {
            setPromptMode(false);
            const normalModeMessage = {
                id: Date.now(),
                text: `‚úÖ **ƒê√É T·∫ÆT CH·∫æ ƒê·ªò AI PROMPT**\n\n${
                    userRole === 'receptionist'
                        ? 'üíº B·∫°n ƒë√£ quay l·∫°i ch·∫ø ƒë·ªô chat th∆∞·ªùng cho l·ªÖ t√¢n.\nT√¥i s·∫Ω tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ qu·∫£n l√Ω kh√°ch s·∫°n v√† h·ªó tr·ª£ kh√°ch h√†ng.'
                        : 'üí¨ B·∫°n ƒë√£ quay l·∫°i ch·∫ø ƒë·ªô chat th∆∞·ªùng.\nT√¥i s·∫Ω tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ kh√°ch s·∫°n v√† du l·ªãch H√† N·ªôi.'
                }`,
                sender: 'bot',
                timestamp: new Date().toISOString(),
                quickReplies: userRole === 'receptionist' 
                    ? ['üè® Qu·∫£n l√Ω ph√≤ng', 'üë• H·ªó tr·ª£ kh√°ch', 'üå§Ô∏è Th·ªùi ti·∫øt', 'üìß Vi·∫øt email']
                    : ['üõèÔ∏è ƒê·∫∑t ph√≤ng', 'üå§Ô∏è Th·ªùi ti·∫øt', 'üó∫Ô∏è Tham quan', 'üìù AI Prompt']
            };
            setMessages(prev => [...prev, normalModeMessage]);
            return;
        }

        // ‚úÖ HANDLE SPECIAL ACTIONS
        if (reply === 'üìû G·ªçi hotline') {
            window.open('tel:0865124996');
            return;
        }
        if (reply === 'üìß G·ª≠i email') {
            window.open('mailto:datltthe194235@gmail.com');
            return;
        }
        if (reply === 'üîÑ Th·ª≠ l·∫°i') {
            sendMessage(messages[messages.length - 2]?.text || 'Xin ch√†o!');
            return;
        }
        
        // ‚úÖ DETECT IF REPLY IS A PROMPT
        const isPromptReply = promptExamples && Object.values(promptExamples).flat().includes(reply);
        sendMessage(reply, isPromptReply || promptMode);
    };

    // ‚úÖ CONNECTION CHECK FUNCTION
    const checkConnection = async () => {
        try {
            const response = await fetch('http://localhost:3000/api/chatbot/health');
            const data = await response.json();
            
            if (response.ok && data.status === 'OK') {
                const successMessage = {
                    id: Date.now(),
                    text: "‚úÖ **K·∫æT N·ªêI TH√ÄNH C√îNG!**\n\nH·ªá th·ªëng AI ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.\n\nüìä Tr·∫°ng th√°i:\n‚Ä¢ Server: Online ‚úÖ\n‚Ä¢ AI Model: " + (data.aiModel || 'Gemini 1.5 Flash') + " ‚úÖ\n‚Ä¢ Database: Connected ‚úÖ\n‚Ä¢ Response Time: " + (data.responseTime || '< 500ms') + "\n\nüéâ B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng chatbot!",
                    sender: 'bot',
                    timestamp: new Date().toISOString(),
                    quickReplies: ['ü§ñ Test AI', 'üè® H·ªèi v·ªÅ kh√°ch s·∫°n', 'üå§Ô∏è Th·ªùi ti·∫øt']
                };
                setMessages(prev => [...prev, successMessage]);
            } else {
                throw new Error('Health check failed');
            }
        } catch (error) {
            const errorMessage = {
                id: Date.now(),
                text: "‚ùå **K·∫æT N·ªêI TH·∫§T B·∫†I!**\n\nKh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server AI.\n\nüîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:\n1. Ki·ªÉm tra k·∫øt n·ªëi internet\n2. Th·ª≠ t·∫£i l·∫°i trang (F5)\n3. Ch·ªù 1-2 ph√∫t r·ªìi th·ª≠ l·∫°i\n4. Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn\n\nüìû H·ªó tr·ª£: 0865.124.996",
                sender: 'bot',
                timestamp: new Date().toISOString(),
                isError: true,
                quickReplies: ['üîÑ Th·ª≠ l·∫°i', 'üîß H∆∞·ªõng d·∫´n fix', 'üìû G·ªçi hotline']
            };
            setMessages(prev => [...prev, errorMessage]);
        }
    };

    // ‚úÖ HELPER FUNCTIONS TO GENERATE CONTENT (same as before)
    const generateWeatherMessage = () => {
        if (!weatherInfo) return "ƒêang t·∫£i th√¥ng tin th·ªùi ti·∫øt...";
        
        const currentSeason = weatherInfo.currentSeason;
        const seasonData = weatherInfo.seasonalTips[currentSeason];
        
        return `üå§Ô∏è TH·ªúI TI·∫æT H√Ä N·ªòI - M√ôA ${currentSeason.toUpperCase()}:\n\n` +
               `üå°Ô∏è Nhi·ªát ƒë·ªô: ${seasonData.temperature}\n` +
               `üëï Trang ph·ª•c: ${seasonData.clothing}\n` +
               `üéØ Ho·∫°t ƒë·ªông: ${seasonData.activities}\n` +
               `üí° L·ªùi khuy√™n: ${seasonData.tips}\n\n` +
               `üìã D·ª± b√°o 7 ng√†y t·ªõi:\n${weatherInfo.weeklyForecast.slice(0, 3).map(day => 
                   `${day.date}: ${day.temperature}, ${day.condition}`
               ).join('\n')}`;
    };

    const generateAttractionsMessage = () => {
        if (!localAttractions) return "ƒêang t·∫£i th√¥ng tin ƒë·ªãa ƒëi·ªÉm...";
        
        return `üó∫Ô∏è ƒê·ªäA ƒêI·ªÇM THAM QUAN G·∫¶N HOTEL HUB:\n\n` +
               localAttractions.nearbyAttractions.map(place => 
                   `üìç ${place.name}\n` +
                   `   üìè C√°ch: ${place.distance} (${place.duration})\n` +
                   `   üìù M√¥ t·∫£: ${place.description}\n` +
                   `   ‚≠ê Th·ªùi ƒëi·ªÉm: ${place.bestTime}\n`
               ).join('\n') +
               `\nüèôÔ∏è TRUNG T√ÇM H√Ä N·ªòI:\n` +
               localAttractions.hanoiAttractions.slice(0, 2).map(place => 
                   `üìç ${place.name}: ${place.distance} (${place.duration})`
               ).join('\n');
    };

    // ‚úÖ ENHANCED CLEAR CHAT WITH CONFIRMATION
    const clearChat = () => {
        if (messages.length > 1) {
            const confirmed = window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán kh√¥ng?');
            if (!confirmed) return;
        }
        
        const welcomeMsg = getWelcomeMessage();
        setMessages([{
            id: 1,
            text: welcomeMsg.text,
            sender: 'bot',
            timestamp: new Date().toISOString(),
            quickReplies: welcomeMsg.quickReplies
        }]);
        setSessionId(null);
        setPromptMode(false);
    };

    // ‚úÖ REFRESH CACHE FUNCTION
    const refreshChatBotCache = async () => {
        try {
            const response = await fetch('http://localhost:3000/api/chatbot/refresh-cache', {
                method: 'POST'
            });
            
            if (response.ok) {
                const data = await response.json();
                toast.success('ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi!');
                
                const refreshMessage = {
                    id: Date.now(),
                    text: `üîÑ **D·ªÆ LI·ªÜU ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T!**\n\n‚úÖ Th√¥ng tin m·ªõi nh·∫•t t·ª´ h·ªá th·ªëng:\n‚Ä¢ T√¨nh tr·∫°ng ph√≤ng\n‚Ä¢ Khuy·∫øn m√£i hi·ªán t·∫°i\n‚Ä¢ D·ªãch v·ª• kh√°ch s·∫°n\n‚Ä¢ Th·ªëng k√™ booking\n\n‚è∞ C·∫≠p nh·∫≠t l√∫c: ${new Date().toLocaleString('vi-VN')}`,
                    sender: 'bot',
                    timestamp: new Date().toISOString(),
                    isSystem: true,
                    quickReplies: ['üè® Xem ph√≤ng m·ªõi', 'üí∞ Khuy·∫øn m√£i', 'üìä Th·ªëng k√™']
                };
                setMessages(prev => [...prev, refreshMessage]);
            } else {
                throw new Error('Refresh failed');
            }
        } catch (error) {
            console.error('Refresh cache error:', error);
            toast.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu');
        }
    };

    const formatTime = (timestamp) => {
        return new Date(timestamp).toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    return (
        <>
            {/* Chat Button */}
            <div className={`${styles['chatbot-toggle']} ${isOpen ? styles.active : ''}`} onClick={toggleChat}>
                {isOpen ? (
                    <i className="fas fa-times"></i>
                ) : (
                    <div className={styles['chat-icon']}>
                        <i className="fas fa-robot"></i>
                        <div className={styles['chat-badge']}>
                            {getUserRole() === 'receptionist' ? 'üõéÔ∏è' : 
                             getUserRole() === 'manager' ? 'üëî' : 
                             getUserRole() === 'customer' ? 'üë§' : 'üè®'}
                        </div>
                    </div>
                )}
            </div>

            {/* Chat Window */}
            <div className={`${styles['chatbot-window']} ${isOpen ? styles.open : ''}`}>
                {/* Header */}
                <div className={styles['chatbot-header']}>
                    <div className={styles['header-info']}>
                        <div className={styles['bot-avatar']}>
                            <i className="fas fa-robot"></i>
                        </div>
                        <div className={styles['header-text']}>
                            <h4>{getChatBotTitle()}</h4>
                            <span className={styles.status}>
                                <span className={styles['status-dot']}></span>
                                {getStatusText()}
                            </span>
                        </div>
                    </div>
                    <div className={styles['header-actions']}>
                        {/* ‚úÖ AI PROMPT MODE TOGGLE */}
                        <button 
                            className={`${styles['btn-prompt']} ${promptMode ? styles.active : ''}`}
                            onClick={() => handleQuickReply(promptMode ? 'üîô Chat th∆∞·ªùng' : 'üìù AI Prompt')} 
                            title={promptMode ? "Tho√°t ch·∫ø ƒë·ªô prompt" : "Ch·∫ø ƒë·ªô AI prompt"}
                        >
                            <i className={promptMode ? "fas fa-comments" : "fas fa-magic"}></i>
                        </button>
                        <button 
                            className={styles['btn-refresh']} 
                            onClick={refreshChatBotCache} 
                            title="C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi"
                        >
                            <i className="fas fa-sync-alt"></i>
                        </button>
                        <button 
                            className={styles['btn-clear']} 
                            onClick={clearChat} 
                            title="X√≥a cu·ªôc tr√≤ chuy·ªán"
                        >
                            <i className="fas fa-trash"></i>
                        </button>
                        <button 
                            className={styles['btn-close']} 
                            onClick={toggleChat} 
                            title="ƒê√≥ng chat"
                        >
                            <i className="fas fa-minus"></i>
                        </button>
                    </div>
                </div>

                {/* Messages */}
                <div className={styles['chatbot-messages']}>
                    {messages.map((message) => (
                        <div key={message.id} className={`${styles.message} ${styles[message.sender]}`}>
                            <div className={styles['message-content']}>
                                <div className={`${styles['message-bubble']} ${
                                    message.isError ? styles.error : 
                                    message.isSystem ? styles.system :
                                    message.isPrompt ? styles.prompt :
                                    message.isPromptResponse ? styles.promptResponse : ''
                                }`}>
                                    <p style={{whiteSpace: 'pre-line'}}>{message.text}</p>
                                    <span className={styles['message-time']}>
                                        {formatTime(message.timestamp)}
                                        {/* ‚úÖ SHOW MESSAGE TYPE INFO */}
                                        {(message.isPrompt || message.isPromptResponse) && (
                                            <small style={{display: 'block', fontSize: '0.7rem', opacity: 0.7}}>
                                                {message.isPrompt ? 'ü§ñ AI Prompt' : '‚ú® AI Response'}
                                            </small>
                                        )}
                                        {message.model && process.env.NODE_ENV === 'development' && (
                                            <small style={{display: 'block', fontSize: '0.7rem', opacity: 0.7}}>
                                                {message.model} ‚Ä¢ {message.intent}
                                            </small>
                                        )}
                                    </span>
                                </div>
                                
                                {/* Quick Replies */}
                                {message.quickReplies && message.quickReplies.length > 0 && (
                                    <div className={styles['quick-replies']}>
                                        {message.quickReplies.map((reply, index) => (
                                            <button
                                                key={index}
                                                className={styles['quick-reply-btn']}
                                                onClick={() => handleQuickReply(reply)}
                                            >
                                                {reply}
                                            </button>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>
                    ))}
                    
                    {/* Typing Indicator */}
                    {isTyping && (
                        <div className={`${styles.message} ${styles.bot}`}>
                            <div className={styles['message-content']}>
                                <div className={`${styles['message-bubble']} ${styles.typing}`}>
                                    <div className={styles['typing-dots']}>
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    <div ref={messagesEndRef} />
                </div>

                {/* Input */}
                <div className={styles['chatbot-input']}>
                    <div className={styles['input-container']}>
                        <input
                            ref={inputRef}
                            type="text"
                            value={inputMessage}
                            onChange={(e) => setInputMessage(e.target.value)}
                            onKeyPress={handleKeyPress}
                            placeholder={getPlaceholderText()}
                            disabled={isTyping}
                            maxLength={promptMode ? 2000 : 1000}
                        />
                        <button 
                            className={styles['send-button']}
                            onClick={() => sendMessage()}
                            disabled={!inputMessage.trim() || isTyping}
                        >
                            <i className="fas fa-paper-plane"></i>
                        </button>
                    </div>
                    <div className={styles['input-footer']}>
                        <small>
                            {/* ‚úÖ SHOW CHARACTER COUNT AND MODE */}
                            {inputMessage.length}/{promptMode ? 2000 : 1000} ‚Ä¢ 
                            {promptMode ? ' ü§ñ AI Prompt' : ' üí¨ Chat'} ‚Ä¢ 
                            Powered by {modelInfo?.name || 'Gemini AI'} ‚Ä¢ 
                            {getUserRole() === 'receptionist' ? 'üë®‚Äçüíº L·ªÖ t√¢n' : 
                             getUserRole() === 'manager' ? 'üëî Qu·∫£n l√Ω' : 
                             getUserRole() === 'customer' ? 'üë§ Kh√°ch h√†ng' : 'üè® Hanoi Expert'}
                        </small>
                    </div>
                </div>
            </div>
        </>
    );
};

export default ChatBot;