import { useState } from 'react';

export const useBookingValidation = () => {
  const [validationErrors, setValidationErrors] = useState({});

  // ‚úÖ S·ª¨A: validateForm v·ªõi enhanced debugging
  const validateForm = (formData) => {
    const errors = {};

    // ‚úÖ ENHANCED DEBUG LOGGING
    console.log('üîç validateForm called with:', {
      formData,
      formDataType: typeof formData,
      isUndefined: formData === undefined,
      isNull: formData === null,
      isObject: typeof formData === 'object',
      hasKeys: formData ? Object.keys(formData).length : 0,
      stackTrace: new Error().stack
    });

    // ‚úÖ SAFETY CHECK: Ki·ªÉm tra formData tr∆∞·ªõc khi s·ª≠ d·ª•ng
    if (!formData || typeof formData !== 'object') {
      console.error('‚ùå FormData is invalid in validateForm:', {
        received: formData,
        type: typeof formData,
        isUndefined: formData === undefined,
        isNull: formData === null
      });
      errors.general = 'D·ªØ li·ªáu form kh√¥ng h·ª£p l·ªá';
      setValidationErrors(errors);
      return false;
    }

    console.log('‚úÖ FormData validation passed, proceeding with field validation...');

    // ‚úÖ REQUIRED FIELDS validation v·ªõi safety checks
    if (!formData.customerName?.trim()) {
      errors.customerName = 'Vui l√≤ng nh·∫≠p h·ªç t√™n kh√°ch h√†ng';
    }
    
    if (!formData.phoneNumber?.trim() && !formData.walkInGuestPhoneNumber?.trim()) {
      errors.phoneNumber = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    }
    
    if (!formData.email?.trim()) {
      errors.email = 'Vui l√≤ng nh·∫≠p email';
    }

    // ‚úÖ FORMAT VALIDATION v·ªõi safety checks
    if (formData.email && formData.email.trim()) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email.trim())) {
        errors.email = 'Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng';
      }
    }

    if (formData.phoneNumber || formData.walkInGuestPhoneNumber) {
      const phoneRegex = /^[0-9]{10,11}$/;
      const phone = formData.phoneNumber || formData.walkInGuestPhoneNumber;
      if (phone && !phoneRegex.test(phone.replace(/\s/g, ''))) {
        errors.phoneNumber = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (10-11 s·ªë)';
      }
    }

    // ‚úÖ NUMBER OF GUESTS validation v·ªõi safety check
    const numberOfGuests = parseInt(formData.numberOfGuests || formData.numberOfGuest || 0);
    if (!numberOfGuests || numberOfGuests < 1) {
      errors.numberOfGuests = 'S·ªë kh√°ch ph·∫£i l·ªõn h∆°n 0';
    }

    // ‚úÖ OPTIONAL: Date validation - ch·ªâ validate n·∫øu c√≥
    if (formData.checkIn && formData.checkOut) {
      const checkInDate = new Date(formData.checkIn);
      const checkOutDate = new Date(formData.checkOut);
      const now = new Date();

      if (checkInDate < now) {
        errors.checkIn = 'Th·ªùi gian nh·∫≠n ph√≤ng kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©';
      }

      if (checkInDate >= checkOutDate) {
        errors.dateRange = 'Th·ªùi gian tr·∫£ ph√≤ng ph·∫£i sau th·ªùi gian nh·∫≠n ph√≤ng';
      }
    }

    setValidationErrors(errors);
    
    console.log('‚úÖ Validation completed:', {
      errorsCount: Object.keys(errors).length,
      errors,
      isValid: Object.keys(errors).length === 0
    });
    
    return Object.keys(errors).length === 0;
  };

  // ‚úÖ GI·ªÆ NGUY√äN: C√°c functions kh√°c
  const validateDateTime = (field, value, formData) => {
    // ‚úÖ Safety check
    if (!formData) {
      console.warn('FormData is undefined in validateDateTime');
      return false;
    }
    
    const errors = { ...validationErrors };
    const now = new Date();
    const selectedDate = new Date(value);

    // X√≥a l·ªói c≈© cho field n√†y
    delete errors[field];
    delete errors.dateRange;

    if (field === 'checkIn') {
      // Check-in kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©
      if (selectedDate < now) {
        errors.checkIn = 'Th·ªùi gian nh·∫≠n ph√≤ng kh√¥ng ƒë∆∞·ª£c trong qu√° kh·ª©';
      }
      
      // Ki·ªÉm tra gi·ªù check-in (khuy·∫øn ngh·ªã 12:00)
      const checkInHour = selectedDate.getHours();
      if (checkInHour < 12) {
        errors.checkInWarning = 'Khuy·∫øn ngh·ªã nh·∫≠n ph√≤ng t·ª´ 12:00. Nh·∫≠n ph√≤ng s·ªõm c√≥ th·ªÉ ph·∫£i ch·ªù.';
      }

      // N·∫øu c√≥ check-out, ki·ªÉm tra logic
      if (formData.checkOut) {
        const checkOutDate = new Date(formData.checkOut);
        if (selectedDate >= checkOutDate) {
          errors.dateRange = 'Th·ªùi gian nh·∫≠n ph√≤ng ph·∫£i tr∆∞·ªõc th·ªùi gian tr·∫£ ph√≤ng';
        }
      }
    }

    if (field === 'checkOut') {
      // Check-out kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc check-in
      if (formData.checkIn) {
        const checkInDate = new Date(formData.checkIn);
        if (selectedDate <= checkInDate) {
          errors.dateRange = 'Th·ªùi gian tr·∫£ ph√≤ng ph·∫£i sau th·ªùi gian nh·∫≠n ph√≤ng';
        }
      }

      // ‚úÖ S·ª¨A: C·∫£nh b√°o v·ªÅ ph√≠ checkout mu·ªôn v·ªõi c√¥ng th·ª©c m·ªõi
      const checkOutHour = selectedDate.getHours();
      const checkOutMinute = selectedDate.getMinutes();
      const checkOutTime = checkOutHour + (checkOutMinute / 60);
      
      // ‚úÖ CH·ªà hi·ªÉn th·ªã warning khi SAU 11:30 (> 11.5)
      if (checkOutTime > 11.5) { // 11:30 = 11.5 hours
        const hoursOverdue = Math.ceil(checkOutTime - 11.5);
        const formattedMinute = selectedDate.getMinutes().toString().padStart(2, '0');
        errors.checkOutWarning = `Tr·∫£ ph√≤ng sau 11:30 s·∫Ω t√≠nh ph√≠ 10% gi√° ph√≤ng/ƒë√™m cho m·ªói gi·ªù tr·ªÖ (${checkOutHour}:${formattedMinute} = ${hoursOverdue} gi·ªù tr·ªÖ)`;
      }
    }

    setValidationErrors(errors);
    return Object.keys(errors).filter(key => !key.includes('Warning')).length === 0;
  };

  // ‚úÖ S·ª¨A: Thay ƒë·ªïi default time cho checkIn v√† checkOut
  const setDefaultTime = (dateTimeString, isCheckOut = false) => {
    if (!dateTimeString) return '';
    
    const date = new Date(dateTimeString);
    
    if (isCheckOut) {
      // ‚úÖ CheckOut: 11:30 AM
      date.setHours(11, 30, 0, 0);
    } else {
      // ‚úÖ CheckIn: 12:00 PM (12 AM = midnight, 12 PM = noon)
      date.setHours(12, 0, 0, 0);
    }
    
    // Format to datetime-local input format
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  };

  return {
    validationErrors,
    setValidationErrors,
    validateDateTime,
    validateForm,
    setDefaultTime
  };
};