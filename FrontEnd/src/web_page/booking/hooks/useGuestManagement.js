import { useState } from 'react';
import { toast } from 'react-toastify';
import { useAuth } from '../../../contexts/AuthContext';

export const useGuestManagement = () => {
  const [guestLoading, setGuestLoading] = useState(false);
  const [existingGuest, setExistingGuest] = useState(null);
  const { user } = useAuth();

  // Ki·ªÉm tra guest ƒë√£ t·ªìn t·∫°i b·∫±ng s·ªë ƒëi·ªán tho·∫°i
  const checkExistingGuest = async (phoneNumber) => {
    if (!phoneNumber || phoneNumber.length < 10) {
      setExistingGuest(null);
      return null;
    }

    try {
      setGuestLoading(true);
      console.log('üîç Checking existing guest with phone:', phoneNumber);

      const response = await fetch(`http://localhost:3000/api/guests/${phoneNumber}`, {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.status === 404) {
        // Guest kh√¥ng t·ªìn t·∫°i - ƒë√¢y l√† tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng
        console.log('üìù Guest not found, will create new one');
        setExistingGuest(null);
        return null;
      }

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.data) {
          console.log('‚úÖ Found existing guest:', data.data.guestName);
          setExistingGuest(data.data);
          toast.info(`T√¨m th·∫•y kh√°ch h√†ng: ${data.data.guestName}`);
          return data.data;
        }
      } else {
        console.error('‚ùå Error checking guest:', response.status);
      }

      setExistingGuest(null);
      return null;
    } catch (error) {
      console.error('‚ùå Error checking existing guest:', error);
      setExistingGuest(null);
      return null;
    } finally {
      setGuestLoading(false);
    }
  };

  // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t guest
  const createOrUpdateGuest = async (guestData) => {
    try {
      setGuestLoading(true);
      
      // L·∫•y receptionistID t·ª´ user hi·ªán t·∫°i
      const receptionistID = user?.UserID;
      if (!receptionistID) {
        throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n l·ªÖ t√¢n');
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu guest
      const guestPayload = {
        guestPhoneNumber: guestData.phoneNumber.replace(/\s/g, ''), // Remove spaces
        guestName: guestData.customerName.trim(),
        guestEmail: guestData.email?.trim() || null,
        receptionistID: receptionistID
      };

      console.log('üíæ Creating/updating guest:', guestPayload);

      // ‚úÖ S·ª¨A: KI·ªÇM TRA GUEST T·ªíN T·∫†I TR∆Ø·ªöC KHI T·∫†O
      console.log('üîç Checking if guest exists before creating...');
      const existingGuestCheck = await checkExistingGuest(guestPayload.guestPhoneNumber);
      
      if (existingGuestCheck) {
        // Guest ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t th√¥ng tin
        console.log('‚ÑπÔ∏è Guest already exists, updating information...');
        const updateResponse = await fetch(`http://localhost:3000/api/guests/${guestPayload.guestPhoneNumber}`, {
          method: 'PUT',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            guestName: guestPayload.guestName,
            guestEmail: guestPayload.guestEmail
          })
        });

        if (updateResponse.ok) {
          const updateData = await updateResponse.json();
          console.log('‚úÖ Guest updated successfully');
          setExistingGuest(updateData.data);
          toast.success('C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng');
          return updateData.data;
        } else {
          const errorData = await updateResponse.json();
          throw new Error(errorData.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng');
        }
      } else {
        // Guest ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
        console.log('‚ûï Creating new guest...');
        const createResponse = await fetch('http://localhost:3000/api/guests', {
          method: 'POST',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(guestPayload)
        });

        if (createResponse.ok) {
          const createData = await createResponse.json();
          console.log('‚úÖ Guest created successfully');
          setExistingGuest(createData.data);
          toast.success('T·∫°o th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng');
          return createData.data;
        } else {
          const errorData = await createResponse.json();
          throw new Error(errorData.message || 'Kh√¥ng th·ªÉ t·∫°o kh√°ch h√†ng');
        }
      }

    } catch (error) {
      console.error('‚ùå Error in createOrUpdateGuest:', error);
      toast.error(`L·ªói x·ª≠ l√Ω th√¥ng tin kh√°ch h√†ng: ${error.message}`);
      throw error;
    } finally {
      setGuestLoading(false);
    }
  };

  // Validate guest data tr∆∞·ªõc khi submit
  const validateGuestData = (formData) => {
    const errors = [];

    if (!formData.phoneNumber || formData.phoneNumber.trim().length < 10) {
      errors.push('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
    }

    if (!formData.customerName || formData.customerName.trim().length < 2) {
      errors.push('T√™n kh√°ch h√†ng kh√¥ng h·ª£p l·ªá');
    }

    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.push('Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // 1. T·∫°o guest tr∆∞·ªõc (B·∫ÆT BU·ªòC)
      const guestResult = await createOrUpdateGuest({
        phoneNumber: formData.phoneNumber,
        customerName: formData.customerName, 
        email: formData.email
      });
      
      if (!guestResult) {
        toast.error('Kh√¥ng th·ªÉ t·∫°o th√¥ng tin kh√°ch h√†ng');
        return;
      }
      
      // 2. Ch·ªâ t·∫°o booking khi guest ƒë√£ t·ªìn t·∫°i
      const bookingResponse = await fetch('http://localhost:3000/api/bookings/walk-in', {
        method: 'POST',
        // ... booking payload
      });
      
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return {
    guestLoading,
    existingGuest,
    checkExistingGuest,
    createOrUpdateGuest,
    validateGuestData,
    setExistingGuest
  };
};