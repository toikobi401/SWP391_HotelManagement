// AddPromotion.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import styles from './AddPromotion.module.css';

function AddPromotion() {
  const [form, setForm] = useState({
    promotionName: '',
    discountPercent: '',
    startDate: '',
    endDate: '',
    description: '',
    status: 'Active' // ‚úÖ TH√äM status field v·ªõi default value
  });

  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  // ‚úÖ TH√äM: Status options
  const statusOptions = [
    { value: 'Active', label: 'Ho·∫°t ƒë·ªông', color: 'success' },
    { value: 'Inactive', label: 'Kh√¥ng ho·∫°t ƒë·ªông', color: 'secondary' },
    { value: 'Draft', label: 'B·∫£n nh√°p', color: 'warning' },
    { value: 'Suspended', label: 'T·∫°m ng∆∞ng', color: 'danger' }
  ];

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Basic validation
    if (!form.promotionName.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p t√™n khuy·∫øn m√£i');
      return;
    }

    if (!form.discountPercent || parseFloat(form.discountPercent) <= 0) {
      toast.error('Vui l√≤ng nh·∫≠p ph·∫ßn trƒÉm gi·∫£m gi√° h·ª£p l·ªá');
      return;
    }

    if (!form.startDate || !form.endDate) {
      toast.error('Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c');
      return;
    }

    if (new Date(form.startDate) >= new Date(form.endDate)) {
      toast.error('Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c');
      return;
    }

    try {
      setLoading(true);

      const promotionData = {
        promotionName: form.promotionName.trim(),
        discountPercent: parseFloat(form.discountPercent),
        startDate: form.startDate,
        endDate: form.endDate,
        description: form.description.trim(),
        status: form.status // ‚úÖ TH√äM status v√†o request
      };

      console.log('üì§ Sending promotion data:', promotionData);

      const response = await fetch('http://localhost:3000/api/promotions', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(promotionData)
      });

      const result = await response.json();

      if (response.ok && result.success) {
        toast.success('T·∫°o khuy·∫øn m√£i th√†nh c√¥ng!');
        navigate('/manager/promotions');
      } else {
        throw new Error(result.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o khuy·∫øn m√£i');
      }

    } catch (error) {
      console.error('‚ùå Error creating promotion:', error);
      toast.error(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    navigate('/manager/promotions');
  };

  return (
    <div className={`container mt-4 ${styles.promotionForm}`}>
      <div className="card shadow p-4">
        <h3 className="mb-4 text-success">‚ûï Th√™m khuy·∫øn m√£i m·ªõi</h3>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">T√™n khuy·∫øn m√£i <span className="text-danger">*</span></label>
            <input
              type="text"
              className="form-control"
              name="promotionName"
              value={form.promotionName}
              onChange={handleChange}
              placeholder="VD: Khuy·∫øn m√£i m√πa h√®"
              required
              disabled={loading}
            />
          </div>

          <div className="mb-3">
            <label className="form-label">Ph·∫ßn trƒÉm gi·∫£m gi√° (%) <span className="text-danger">*</span></label>
            <input
              type="number"
              className="form-control"
              name="discountPercent"
              value={form.discountPercent}
              onChange={handleChange}
              placeholder="VD: 20"
              min="0"
              max="100"
              required
              disabled={loading}
            />
          </div>

          <div className="row">
            <div className="col-md-6 mb-3">
              <label className="form-label">Ng√†y b·∫Øt ƒë·∫ßu <span className="text-danger">*</span></label>
              <input
                type="date"
                className="form-control"
                name="startDate"
                value={form.startDate}
                onChange={handleChange}
                required
                disabled={loading}
              />
            </div>
            <div className="col-md-6 mb-3">
              <label className="form-label">Ng√†y k·∫øt th√∫c <span className="text-danger">*</span></label>
              <input
                type="date"
                className="form-control"
                name="endDate"
                value={form.endDate}
                onChange={handleChange}
                required
                disabled={loading}
              />
            </div>
          </div>

          {/* ‚úÖ TH√äM: Status selection */}
          <div className="mb-3">
            <label className="form-label">Tr·∫°ng th√°i <span className="text-danger">*</span></label>
            <select
              className="form-control"
              name="status"
              value={form.status}
              onChange={handleChange}
              required
              disabled={loading}
            >
              {statusOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            <small className="form-text text-muted">
              {form.status === 'Active' && '‚úÖ Khuy·∫øn m√£i s·∫Ω c√≥ th·ªÉ s·ª≠ d·ª•ng ngay khi trong th·ªùi gian hi·ªáu l·ª±c'}
              {form.status === 'Inactive' && '‚è∏Ô∏è Khuy·∫øn m√£i s·∫Ω kh√¥ng th·ªÉ s·ª≠ d·ª•ng'}
              {form.status === 'Draft' && 'üìù L∆∞u d∆∞·ªõi d·∫°ng b·∫£n nh√°p, ch∆∞a c√¥ng khai'}
              {form.status === 'Suspended' && 'üö´ T·∫°m ng∆∞ng s·ª≠ d·ª•ng khuy·∫øn m√£i'}
            </small>
          </div>

          <div className="mb-4">
            <label className="form-label">M√¥ t·∫£</label>
            <textarea
              className="form-control"
              name="description"
              value={form.description}
              onChange={handleChange}
              rows="3"
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ khuy·∫øn m√£i..."
              disabled={loading}
            />
          </div>

          <div className="d-flex gap-2 justify-content-end">
            <button 
              type="button" 
              className="btn btn-secondary"
              onClick={handleCancel}
              disabled={loading}
            >
              H·ªßy
            </button>
            <button 
              type="submit" 
              className="btn btn-success"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  ƒêang t·∫°o...
                </>
              ) : (
                'T·∫°o khuy·∫øn m√£i'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default AddPromotion;
