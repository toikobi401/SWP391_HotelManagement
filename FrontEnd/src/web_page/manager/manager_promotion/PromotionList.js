// PromotionList.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import EditPromotionModal from './EditPromotionModal';
// ‚úÖ X√ìA: DeletePromotionModal import
import './PromotionList.css';

function PromotionList() {
  const [promotions, setPromotions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    name: '',
    discount: '',
    startDate: '',
    endDate: '',
    status: ''
  });
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'asc'
  });
  
  // Modal states - ‚úÖ X√ìA: deleteModalOpen v√† selectedPromotion states
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [selectedPromotionId, setSelectedPromotionId] = useState(null);

  // Status options
  const statusOptions = [
    { value: '', label: 'T·∫•t c·∫£ tr·∫°ng th√°i' },
    { value: 'Active', label: 'Ho·∫°t ƒë·ªông', color: 'success' },
    { value: 'Inactive', label: 'Kh√¥ng ho·∫°t ƒë·ªông', color: 'secondary' },
    { value: 'Draft', label: 'B·∫£n nh√°p', color: 'warning' },
    { value: 'Expired', label: 'H·∫øt h·∫°n', color: 'danger' },
    { value: 'Suspended', label: 'T·∫°m ng∆∞ng', color: 'info' }
  ];

  // Fetch promotions from API
  useEffect(() => {
    fetchPromotions();
  }, []);

  const fetchPromotions = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Fetching promotions from API...');
      
      const response = await fetch('http://localhost:3000/api/promotions', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Promotions fetched:', result);
        
        if (result.success && Array.isArray(result.data)) {
          setPromotions(result.data);
        } else {
          throw new Error(result.message || 'Invalid response format');
        }
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.error('‚ùå Error fetching promotions:', error);
      toast.error('L·ªói khi t·∫£i danh s√°ch khuy·∫øn m√£i: ' + error.message);
      setPromotions([]);
    } finally {
      setLoading(false);
    }
  };

  // Handle edit promotion
  const handleEditPromotion = (promotionId) => {
    console.log('üîç Opening edit modal for promotion:', promotionId);
    setSelectedPromotionId(promotionId);
    setEditModalOpen(true);
  };

  // Handle close edit modal
  const handleCloseEditModal = () => {
    console.log('üîí Closing edit modal');
    setEditModalOpen(false);
    setSelectedPromotionId(null);
  };

  // Handle edit success
  const handleEditSuccess = () => {
    console.log('‚úÖ Edit successful, refreshing promotions list');
    fetchPromotions(); // Refresh the promotions list
  };

  // ‚úÖ ENHANCED: Handle delete promotion v·ªõi error handling chi ti·∫øt
  const handleDeletePromotion = async (promotionId, promotionName) => {
    // ‚úÖ KI·ªÇM TRA USAGE TR∆Ø·ªöC KHI X√ìA
    try {
      console.log(`üîç Checking usage for promotion ${promotionId} before deletion...`);
      
      const checkResponse = await fetch(`http://localhost:3000/api/promotions/${promotionId}/check-usage`, {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (checkResponse.ok) {
        const checkResult = await checkResponse.json();
        
        if (checkResult.success && checkResult.data.isInUse) {
          // ‚úÖ HI·ªÇN TH·ªä TH√îNG B√ÅO CHI TI·∫æT V·ªÄ VI·ªÜC KH√îNG TH·ªÇ X√ìA
          const usageDetails = checkResult.data.usage.map(u => `${u.count} ${u.description}`).join(', ');
          
          toast.error(
            `‚ùå Kh√¥ng th·ªÉ x√≥a khuy·∫øn m√£i "${promotionName}"!\n\n` +
            `Khuy·∫øn m√£i n√†y ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ${checkResult.data.totalReferences} b·∫£n ghi: ${usageDetails}\n\n` +
            `üí° ƒê·ªÅ xu·∫•t: Thay ƒë·ªïi tr·∫°ng th√°i th√†nh "Kh√¥ng ho·∫°t ƒë·ªông" thay v√¨ x√≥a.`,
            { 
              autoClose: 8000,
              position: "top-center",
              style: { whiteSpace: 'pre-line' }
            }
          );
          
          // ‚úÖ HI·ªÇN TH·ªä MODAL X√ÅC NH·∫¨N CHUY·ªÇN TR·∫†NG TH√ÅI
          const changeStatus = window.confirm(
            `Khuy·∫øn m√£i "${promotionName}" kh√¥ng th·ªÉ x√≥a v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.\n\n` +
            `B·∫°n c√≥ mu·ªën chuy·ªÉn tr·∫°ng th√°i th√†nh "Kh√¥ng ho·∫°t ƒë·ªông" thay th·∫ø?\n\n` +
            `(ƒêi·ªÅu n√†y s·∫Ω ng∆∞ng vi·ªác s·ª≠ d·ª•ng khuy·∫øn m√£i m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu hi·ªán c√≥)`
          );
          
          if (changeStatus) {
            try {
              await handleStatusToggle(promotionId, 'Active'); // S·∫Ω chuy·ªÉn th√†nh Inactive
              toast.success(`‚úÖ ƒê√£ chuy·ªÉn khuy·∫øn m√£i "${promotionName}" th√†nh tr·∫°ng th√°i "Kh√¥ng ho·∫°t ƒë·ªông"`);
            } catch (statusError) {
              toast.error('L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i khuy·∫øn m√£i');
            }
          }
          
          return; // Exit early, kh√¥ng ti·∫øp t·ª•c x√≥a
        }
      }
    } catch (checkError) {
      console.warn('‚ö†Ô∏è Could not check promotion usage, proceeding with caution:', checkError);
      // Continue with deletion attempt, but with extra confirmation
    }

    // ‚úÖ Confirmation dialog if usage check passed or failed
    const confirmed = window.confirm(
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën X√ìA Vƒ®NH VI·ªÑN khuy·∫øn m√£i "${promotionName}"?\n\n` +
      `‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω x√≥a ho√†n to√†n khuy·∫øn m√£i kh·ªèi c∆° s·ªü d·ªØ li·ªáu v√† KH√îNG TH·ªÇ KH√îI PH·ª§C!\n\n` +
      `Nh·∫•n OK ƒë·ªÉ x√°c nh·∫≠n x√≥a, ho·∫∑c Cancel ƒë·ªÉ h·ªßy.`
    );

    if (!confirmed) {
      return;
    }

    // ‚úÖ Double confirmation cho hard delete
    const doubleConfirmed = window.confirm(
      `üö® X√ÅC NH·∫¨N L·∫¶N CU·ªêI:\n\n` +
      `B·∫°n th·ª±c s·ª± mu·ªën X√ìA Vƒ®NH VI·ªÑN khuy·∫øn m√£i "${promotionName}"?\n\n` +
      `D·ªØ li·ªáu s·∫Ω b·ªã m·∫•t ho√†n to√†n v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c!`
    );

    if (!doubleConfirmed) {
      return;
    }

    try {
      console.log(`üóëÔ∏è Hard deleting promotion ${promotionId}`);
      
      // ‚úÖ G·ªçi API v·ªõi force=true ƒë·ªÉ hard delete
      const response = await fetch(`http://localhost:3000/api/promotions/${promotionId}?force=true&confirm=true`, {
        method: 'DELETE',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (response.ok && result.success) {
        toast.success(`‚úÖ ƒê√£ x√≥a vƒ©nh vi·ªÖn khuy·∫øn m√£i "${promotionName}" th√†nh c√¥ng!`);
        fetchPromotions(); // Refresh list
      } else {
        // ‚úÖ ENHANCED ERROR HANDLING
        if (result.data && result.data.cannotDelete) {
          toast.error(
            `‚ùå ${result.message}\n\nüí° ƒê·ªÅ xu·∫•t: ${result.data.suggestion || 'Thay ƒë·ªïi tr·∫°ng th√°i thay v√¨ x√≥a'}`,
            { 
              autoClose: 10000,
              position: "top-center",
              style: { whiteSpace: 'pre-line' }
            }
          );
        } else {
          throw new Error(result.message || 'Kh√¥ng th·ªÉ x√≥a khuy·∫øn m√£i');
        }
      }
    } catch (error) {
      console.error('‚ùå Error deleting promotion:', error);
      
      // ‚úÖ ENHANCED ERROR MESSAGES
      if (error.message.includes('ƒë∆∞·ª£c s·ª≠ d·ª•ng trong')) {
        toast.error(
          `‚ùå ${error.message}\n\nüí° Th·ª≠ thay ƒë·ªïi tr·∫°ng th√°i th√†nh "Kh√¥ng ho·∫°t ƒë·ªông" thay v√¨ x√≥a.`,
          { 
            autoClose: 8000,
            position: "top-center",
            style: { whiteSpace: 'pre-line' }
          }
        );
      } else if (error.message.includes('FOREIGN KEY') || error.message.includes('r√†ng bu·ªôc')) {
        toast.error(
          `‚ùå Kh√¥ng th·ªÉ x√≥a khuy·∫øn m√£i v√¨ c√≥ r√†ng bu·ªôc d·ªØ li·ªáu!\n\n` +
          `Khuy·∫øn m√£i n√†y ƒëang ƒë∆∞·ª£c tham chi·∫øu b·ªüi c√°c b·∫£n ghi kh√°c trong h·ªá th·ªëng.\n\n` +
          `üí° ƒê·ªÅ xu·∫•t: Thay ƒë·ªïi tr·∫°ng th√°i th√†nh "Kh√¥ng ho·∫°t ƒë·ªông".`,
          { 
            autoClose: 10000,
            position: "top-center",
            style: { whiteSpace: 'pre-line' }
          }
        );
      } else {
        toast.error('L·ªói khi x√≥a khuy·∫øn m√£i: ' + error.message);
      }
    }
  };

  // Get status badge
  const getStatusBadge = (status) => {
    const statusOption = statusOptions.find(opt => opt.value === status);
    const color = statusOption?.color || 'secondary';
    const label = statusOption?.label || status;
    
    return (
      <span className={`badge bg-${color}`}>
        {label}
      </span>
    );
  };

  // Check if promotion is currently active
  const isPromotionActive = (promotion) => {
    const now = new Date();
    const startDate = new Date(promotion.startDate);
    const endDate = new Date(promotion.endDate);
    
    return promotion.status === 'Active' && 
           now >= startDate && 
           now <= endDate;
  };

  // Handle status toggle
  const handleStatusToggle = async (promotionId, currentStatus) => {
    const newStatus = currentStatus === 'Active' ? 'Inactive' : 'Active';
    
    if (!window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${newStatus === 'Active' ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'} khuy·∫øn m√£i n√†y?`)) {
      return;
    }

    try {
      console.log(`üîÑ Updating promotion ${promotionId} status to ${newStatus}`);
      
      const response = await fetch(`http://localhost:3000/api/promotions/${promotionId}/status`, {
        method: 'PUT',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      });

      const result = await response.json();

      if (response.ok && result.success) {
        toast.success(`${newStatus === 'Active' ? 'K√≠ch ho·∫°t' : 'V√¥ hi·ªáu h√≥a'} khuy·∫øn m√£i th√†nh c√¥ng!`);
        fetchPromotions(); // Refresh list
      } else {
        throw new Error(result.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
      }
    } catch (error) {
      console.error('‚ùå Error updating status:', error);
      toast.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: ' + error.message);
    }
  };

  // Filter promotions
  const filteredPromotions = promotions.filter(promo => {
    const matchesName = promo.promotionName.toLowerCase().includes(filters.name.toLowerCase());
    const matchesDiscount = filters.discount === '' || promo.discountPercent === parseInt(filters.discount);
    const matchesStartDate = filters.startDate === '' || promo.startDate === filters.startDate;
    const matchesEndDate = filters.endDate === '' || promo.endDate === filters.endDate;
    const matchesStatus = filters.status === '' || promo.status === filters.status;
    
    return matchesName && matchesDiscount && matchesStartDate && matchesEndDate && matchesStatus;
  });

  // Sort promotions
  const sortedPromotions = [...filteredPromotions].sort((a, b) => {
    if (!sortConfig.key) return 0;
    
    let aValue = a[sortConfig.key];
    let bValue = b[sortConfig.key];
    
    // Handle dates
    if (sortConfig.key === 'startDate' || sortConfig.key === 'endDate') {
      aValue = new Date(aValue);
      bValue = new Date(bValue);
    }
    
    // Handle numbers
    if (sortConfig.key === 'discountPercent') {
      aValue = parseFloat(aValue);
      bValue = parseFloat(bValue);
    }
    
    if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
    return 0;
  });

  // Handle sort
  const handleSort = (key) => {
    setSortConfig({
      key,
      direction: sortConfig.key === key && sortConfig.direction === 'asc' ? 'desc' : 'asc'
    });
  };

  // Handle filter change
  const handleFilterChange = (e) => {
    setFilters({
      ...filters,
      [e.target.name]: e.target.value
    });
  };

  // Clear filters
  const handleClearFilters = () => {
    setFilters({
      name: '',
      discount: '',
      startDate: '',
      endDate: '',
      status: ''
    });
    setSortConfig({ key: null, direction: 'asc' });
  };

  // Format date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  // Get sort icon
  const getSortIcon = (key) => {
    if (sortConfig.key !== key) return 'fas fa-sort';
    return sortConfig.direction === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';
  };

  // Get promotion statistics
  const getStats = () => {
    const total = promotions.length;
    const active = promotions.filter(p => p.status === 'Active').length;
    const inactive = promotions.filter(p => p.status === 'Inactive').length;
    const draft = promotions.filter(p => p.status === 'Draft').length;
    const expired = promotions.filter(p => p.status === 'Expired').length;
    
    return { total, active, inactive, draft, expired };
  };

  const stats = getStats();

  if (loading) {
    return (
      <div className="container mt-4">
        <div className="text-center py-5">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">ƒêang t·∫£i...</span>
          </div>
          <p className="mt-2">ƒêang t·∫£i danh s√°ch khuy·∫øn m√£i...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mt-4 promotion-page">
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h2>
            <i className="fas fa-tags me-2 text-primary"></i>
            Qu·∫£n l√Ω khuy·∫øn m√£i
          </h2>
          <p className="text-muted mb-0">T·∫°o v√† qu·∫£n l√Ω c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i cho kh√°ch s·∫°n</p>
        </div>
        <div className="d-flex gap-2">
          <button 
            className="btn btn-outline-primary"
            onClick={fetchPromotions}
            disabled={loading}
          >
            <i className="fas fa-sync-alt me-1"></i>
            L√†m m·ªõi
          </button>
          <Link to="/manager/promotions/add" className="btn btn-success">
            <i className="fas fa-plus me-1"></i>
            Th√™m khuy·∫øn m√£i
          </Link>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="row mb-4">
        <div className="col-md-2">
          <div className="card bg-primary text-white">
            <div className="card-body text-center">
              <h3 className="mb-1">{stats.total}</h3>
              <small>T·ªïng s·ªë</small>
            </div>
          </div>
        </div>
        <div className="col-md-2">
          <div className="card bg-success text-white">
            <div className="card-body text-center">
              <h3 className="mb-1">{stats.active}</h3>
              <small>Ho·∫°t ƒë·ªông</small>
            </div>
          </div>
        </div>
        <div className="col-md-2">
          <div className="card bg-secondary text-white">
            <div className="card-body text-center">
              <h3 className="mb-1">{stats.inactive}</h3>
              <small>Kh√¥ng ho·∫°t ƒë·ªông</small>
            </div>
          </div>
        </div>
        <div className="col-md-2">
          <div className="card bg-warning text-white">
            <div className="card-body text-center">
              <h3 className="mb-1">{stats.draft}</h3>
              <small>B·∫£n nh√°p</small>
            </div>
          </div>
        </div>
        <div className="col-md-2">
          <div className="card bg-danger text-white">
            <div className="card-body text-center">
              <h3 className="mb-1">{stats.expired}</h3>
              <small>H·∫øt h·∫°n</small>
            </div>
          </div>
        </div>
        <div className="col-md-2">
          <div className="card bg-info text-white">
            <div className="card-body text-center">
              <h3 className="mb-1">{filteredPromotions.length}</h3>
              <small>Hi·ªÉn th·ªã</small>
            </div>
          </div>
        </div>
      </div>

      {/* Filter Section */}
      <div className="card mb-4">
        <div className="card-header">
          <h5 className="mb-0">
            <i className="fas fa-filter me-2"></i>
            B·ªô l·ªçc
          </h5>
        </div>
        <div className="card-body">
          <div className="row g-3">
            <div className="col-md-3">
              <label className="form-label">T√™n khuy·∫øn m√£i</label>
              <input
                type="text"
                className="form-control"
                name="name"
                placeholder="Nh·∫≠p t√™n khuy·∫øn m√£i"
                value={filters.name}
                onChange={handleFilterChange}
              />
            </div>
            <div className="col-md-2">
              <label className="form-label">Gi·∫£m gi√° (%)</label>
              <input
                type="number"
                className="form-control"
                name="discount"
                placeholder="VD: 10"
                value={filters.discount}
                onChange={handleFilterChange}
                min="0"
                max="100"
              />
            </div>
            <div className="col-md-2">
              <label className="form-label">Ng√†y b·∫Øt ƒë·∫ßu</label>
              <input
                type="date"
                className="form-control"
                name="startDate"
                value={filters.startDate}
                onChange={handleFilterChange}
              />
            </div>
            <div className="col-md-2">
              <label className="form-label">Ng√†y k·∫øt th√∫c</label>
              <input
                type="date"
                className="form-control"
                name="endDate"
                value={filters.endDate}
                onChange={handleFilterChange}
              />
            </div>
            <div className="col-md-2">
              <label className="form-label">Tr·∫°ng th√°i</label>
              <select
                className="form-select"
                name="status"
                value={filters.status}
                onChange={handleFilterChange}
              >
                {statusOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
            <div className="col-md-1 d-flex align-items-end">
              <button
                className="btn btn-outline-danger w-100"
                onClick={handleClearFilters}
                title="X√≥a b·ªô l·ªçc"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Promotion Table */}
      <div className="card">
        <div className="card-header">
          <h5 className="mb-0">
            Danh s√°ch khuy·∫øn m√£i ({sortedPromotions.length})
          </h5>
        </div>
        <div className="card-body">
          {sortedPromotions.length === 0 ? (
            <div className="text-center py-5">
              <i className="fas fa-tags fa-3x text-muted mb-3"></i>
              <h5 className="text-muted">Kh√¥ng c√≥ khuy·∫øn m√£i n√†o</h5>
              <p className="text-muted">
                {promotions.length === 0 
                  ? 'Ch∆∞a c√≥ khuy·∫øn m√£i n√†o ƒë∆∞·ª£c t·∫°o.' 
                  : 'Kh√¥ng c√≥ khuy·∫øn m√£i n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.'
                }
              </p>
              {promotions.length === 0 && (
                <Link to="/manager/promotions/add" className="btn btn-primary">
                  <i className="fas fa-plus me-1"></i>
                  T·∫°o khuy·∫øn m√£i ƒë·∫ßu ti√™n
                </Link>
              )}
            </div>
          ) : (
            <div className="table-responsive">
              <table className="table table-bordered table-striped table-hover">
                <thead className="table-dark">
                  <tr>
                    <th style={{ cursor: 'pointer' }} onClick={() => handleSort('promotionName')}>
                      T√™n khuy·∫øn m√£i <i className={getSortIcon('promotionName')}></i>
                    </th>
                    <th style={{ cursor: 'pointer' }} onClick={() => handleSort('discountPercent')}>
                      Gi·∫£m gi√° <i className={getSortIcon('discountPercent')}></i>
                    </th>
                    <th style={{ cursor: 'pointer' }} onClick={() => handleSort('startDate')}>
                      Ng√†y b·∫Øt ƒë·∫ßu <i className={getSortIcon('startDate')}></i>
                    </th>
                    <th style={{ cursor: 'pointer' }} onClick={() => handleSort('endDate')}>
                      Ng√†y k·∫øt th√∫c <i className={getSortIcon('endDate')}></i>
                    </th>
                    <th>M√¥ t·∫£</th>
                    <th style={{ cursor: 'pointer' }} onClick={() => handleSort('status')}>
                      Tr·∫°ng th√°i <i className={getSortIcon('status')}></i>
                    </th>
                    <th style={{ width: '200px' }}>Thao t√°c</th>
                  </tr>
                </thead>
                <tbody>
                  {sortedPromotions.map((promo) => (
                    <tr key={promo.promotionID}>
                      <td>
                        <strong>{promo.promotionName}</strong>
                        {isPromotionActive(promo) && (
                          <span className="badge bg-success ms-2">
                            <i className="fas fa-clock me-1"></i>
                            ƒêang √°p d·ª•ng
                          </span>
                        )}
                      </td>
                      <td>
                        <span className="badge bg-primary fs-6">
                          {promo.discountPercent}%
                        </span>
                      </td>
                      <td>{formatDate(promo.startDate)}</td>
                      <td>{formatDate(promo.endDate)}</td>
                      <td>
                        <span title={promo.description} style={{ cursor: 'help' }}>
                          {promo.description?.length > 50 
                            ? promo.description.substring(0, 50) + '...'
                            : promo.description || 'Kh√¥ng c√≥ m√¥ t·∫£'
                          }
                        </span>
                      </td>
                      <td>{getStatusBadge(promo.status)}</td>
                      <td>
                        {/* ‚úÖ S·ª¨A: ƒê∆°n gi·∫£n h√≥a action buttons */}
                        <div className="btn-group" role="group">
                          <button 
                            className="btn btn-sm btn-outline-primary"
                            onClick={() => handleEditPromotion(promo.promotionID)}
                            title="Ch·ªânh s·ª≠a"
                          >
                            <i className="fas fa-edit"></i>
                          </button>
                          <button 
                            className={`btn btn-sm ${promo.status === 'Active' ? 'btn-outline-warning' : 'btn-outline-success'}`}
                            onClick={() => handleStatusToggle(promo.promotionID, promo.status)}
                            title={promo.status === 'Active' ? 'V√¥ hi·ªáu h√≥a' : 'K√≠ch ho·∫°t'}
                          >
                            <i className={`fas ${promo.status === 'Active' ? 'fa-pause' : 'fa-play'}`}></i>
                          </button>
                          
                          {/* ‚úÖ S·ª¨A: N√∫t x√≥a ƒë∆°n gi·∫£n */}
                          <button 
                            className="btn btn-sm btn-outline-danger"
                            onClick={() => handleDeletePromotion(promo.promotionID, promo.promotionName)}
                            title="X√≥a vƒ©nh vi·ªÖn"
                          >
                            <i className="fas fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* ‚úÖ Edit Promotion Modal */}
      <EditPromotionModal
        isOpen={editModalOpen}
        onClose={handleCloseEditModal}
        promotionId={selectedPromotionId}
        onSuccess={handleEditSuccess}
      />

      {/* ‚úÖ X√ìA: DeletePromotionModal component */}
    </div>
  );
}

export default PromotionList;
