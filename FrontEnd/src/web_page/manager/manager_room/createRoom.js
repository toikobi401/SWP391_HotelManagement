import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import './RoomForm.css';

function AddRoomForm() {
  const [roomNumber, setRoomNumber] = useState('');
  const [typeId, setTypeId] = useState('');
  const [floor, setFloor] = useState('');
  const [capacity, setCapacity] = useState('');
  const [currentPrice, setCurrentPrice] = useState('');
  const [status, setStatus] = useState('available');
  const [description, setDescription] = useState('');
  const [amenities, setAmenities] = useState([]);
  const [roomTypes, setRoomTypes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [submitLoading, setSubmitLoading] = useState(false);
  
  const navigate = useNavigate();

  // ‚úÖ FETCH ROOM TYPES T·ª™ API THAY V√å HARDCODE
  useEffect(() => {
    fetchRoomTypes();
  }, []);

  const fetchRoomTypes = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Fetching room types from API...');
      
      // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng endpoint ƒë√∫ng
      const response = await fetch('http://localhost:3000/api/room-types', {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Room types response status:', response.status);

      if (response.ok) {
        const responseData = await response.json();
        console.log('‚úÖ Room types fetched successfully:', responseData);
        
        // ‚úÖ S·ª¨A: X·ª≠ l√Ω d·ªØ li·ªáu response ƒë√∫ng c√°ch
        const roomTypesData = responseData.data || responseData || [];
        
        if (Array.isArray(roomTypesData) && roomTypesData.length > 0) {
          setRoomTypes(roomTypesData);
          console.log('üìù Room types set:', roomTypesData.length, 'types');
        } else {
          console.warn('‚ö†Ô∏è No room types found, using fallback');
          setFallbackRoomTypes();
        }
      } else {
        console.error('‚ùå Failed to fetch room types:', response.status);
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to fetch room types');
      }
    } catch (error) {
      console.error('‚ùå Error fetching room types:', error);
      setFallbackRoomTypes();
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch lo·∫°i ph√≤ng t·ª´ server');
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ FALLBACK ROOM TYPES N·∫æU API FAIL
  const setFallbackRoomTypes = () => {
    console.log('üîÑ Setting fallback room types...');
    const fallbackTypes = [
      { TypeId: 1, TypeName: 'Ph√≤ng th∆∞·ªùng', BasePrice: 300000, Description: 'Ph√≤ng ti√™u chu·∫©n v·ªõi ti·ªán nghi c∆° b·∫£n' },
      { TypeId: 2, TypeName: 'Ph√≤ng gia ƒë√¨nh', BasePrice: 500000, Description: 'Ph√≤ng r·ªông r√£i ph√π h·ª£p cho gia ƒë√¨nh' },
      { TypeId: 4, TypeName: 'Ph√≤ng ƒë∆°n', BasePrice: 250000, Description: 'Ph√≤ng v·ªõi 1 gi∆∞·ªùng ƒë∆°n' },
      { TypeId: 5, TypeName: 'Ph√≤ng ƒë√¥i', BasePrice: 400000, Description: 'Ph√≤ng v·ªõi 1 gi∆∞·ªùng ƒë√¥i' },
      { TypeId: 6, TypeName: 'Ph√≤ng cao c·∫•p', BasePrice: 800000, Description: 'Ph√≤ng v·ªõi ti·ªán nghi cao c·∫•p' },
      { TypeId: 7, TypeName: 'Ph√≤ng ti·∫øt ki·ªám', BasePrice: 200000, Description: 'Ph√≤ng gi√° r·∫ª v·ªõi ti·ªán nghi c∆° b·∫£n' }
    ];
    setRoomTypes(fallbackTypes);
  };

  // ‚úÖ AUTO-SET PRICE KHI CH·ªåN ROOM TYPE
  useEffect(() => {
    if (typeId && roomTypes.length > 0) {
      const selectedType = roomTypes.find(type => type.TypeId.toString() === typeId);
      if (selectedType && selectedType.BasePrice) {
        setCurrentPrice(selectedType.BasePrice.toString());
        console.log('üí∞ Auto-set price for type', typeId, ':', selectedType.BasePrice);
      }
    }
  }, [typeId, roomTypes]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Enhanced validation
    if (!roomNumber.trim()) {
        toast.error('Vui l√≤ng nh·∫≠p s·ªë ph√≤ng');
        return;
    }
    
    if (!typeId) {
        toast.error('Vui l√≤ng ch·ªçn lo·∫°i ph√≤ng');
        return;
    }
    
    if (!floor) {
        toast.error('Vui l√≤ng ch·ªçn t·∫ßng');
        return;
    }
    
    if (!capacity) {
        toast.error('Vui l√≤ng ch·ªçn s·ª©c ch·ª©a');
        return;
    }

    if (!currentPrice || parseFloat(currentPrice) <= 0) {
        toast.error('Vui l√≤ng nh·∫≠p gi√° ph√≤ng h·ª£p l·ªá');
        return;
    }

    // Validate RoomType t·ªìn t·∫°i
    const selectedRoomType = roomTypes.find(type => type.TypeId.toString() === typeId);
    if (!selectedRoomType) {
        toast.error('Lo·∫°i ph√≤ng ƒë√£ ch·ªçn kh√¥ng h·ª£p l·ªá');
        return;
    }

    try {
        setSubmitLoading(true);
        
        // Prepare room data according to Room model structure
        const roomData = {
            RoomNumber: roomNumber.trim(),
            TypeID: parseInt(typeId),
            Floor: parseInt(floor),
            Capacity: parseInt(capacity),
            CurrentPrice: parseFloat(currentPrice),
            Status: status,
            Description: description.trim(),
            CreateAt: new Date().toISOString(),
            UpdateAt: new Date().toISOString() // ‚úÖ S·ª¨A T√äN FIELD
        };

        console.log('üì§ Sending room data:', roomData);
        console.log('üè∑Ô∏è Selected room type:', selectedRoomType);

        const response = await fetch('http://localhost:3000/api/rooms', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(roomData)
        });

        const responseData = await response.json();
        console.log('üì• Server response:', responseData);

        if (response.ok && responseData.success) {
            toast.success(`Th√™m ph√≤ng ${roomNumber} (${selectedRoomType.TypeName}) th√†nh c√¥ng!`);
            
            // Handle amenities if any were selected
            if (amenities.length > 0 && responseData.roomId) {
                await handleAmenities(responseData.roomId);
            }
            
            // Navigate back to rooms list
            setTimeout(() => {
                navigate('/manager/rooms');
            }, 1500);
        } else {
            throw new Error(responseData.message || 'C√≥ l·ªói x·∫£y ra khi th√™m ph√≤ng');
        }
    } catch (error) {
        console.error('‚ùå Error adding room:', error);
        toast.error(error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß');
    } finally {
        setSubmitLoading(false);
    }
  };

  // Handle adding amenities to the newly created room
  const handleAmenities = async (roomId) => {
    try {
      for (const amenityName of amenities) {
        // This would require an amenity lookup endpoint
        console.log(`üéØ Would assign amenity ${amenityName} to room ${roomId}`);
      }
    } catch (error) {
      console.error('‚ùå Error adding amenities:', error);
      toast.warning('Ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o nh∆∞ng c√≥ l·ªói khi th√™m ti·ªán nghi');
    }
  };

  // Static data for form options
  const floors = [1, 2, 3, 4, 5];
  const capacities = [1, 2, 3, 4, 5, 6];
  
  const statusOptions = [
    { value: 'available', label: 'C√≥ s·∫µn' },
    { value: 'occupied', label: 'ƒêang s·ª≠ d·ª•ng' },
    { value: 'reserved', label: 'ƒê√£ ƒë·∫∑t' },
    { value: 'maintenance', label: 'B·∫£o tr√¨' }
  ];

  const amenityOptions = [
    'Kitchenette',
    'Sea view',
    'Jacuzzi',
    'Smart TV',
    'Controlls tablet',
  ];

  const amenityTranslations = {
    'Kitchenette': 'B·∫øp mini',
    'Sea view': 'View bi·ªÉn',
    'Jacuzzi': 'B·ªìn t·∫Øm',
    'Smart TV': 'TV th√¥ng minh',
    'Controlls tablet': 'M√°y t√≠nh b·∫£ng ƒëi·ªÅu khi·ªÉn',
  };

  if (loading) {
    return (
      <div className="room-form-container">
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="sr-only">ƒêang t·∫£i...</span>
          </div>
          <p>ƒêang t·∫£i th√¥ng tin lo·∫°i ph√≤ng...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="room-form-container">
      <h2 className="mb-3">Th√™m ph√≤ng m·ªõi</h2>
      
      {/* ‚úÖ HI·ªÇN TH·ªä TH√îNG TIN DEBUG N·∫æU C·∫¶N */}
      {process.env.NODE_ENV === 'development' && (
        <div className="alert alert-info">
          <small>
            üîç Debug: ƒê√£ t·∫£i {roomTypes.length} lo·∫°i ph√≤ng t·ª´ {roomTypes.length > 0 && roomTypes[0].TypeId ? 'database' : 'fallback'}
          </small>
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>S·ªë ph√≤ng: <span className="text-danger">*</span></label>
          <input
            type="text"
            className="form-control"
            value={roomNumber}
            onChange={(e) => setRoomNumber(e.target.value)}
            placeholder="V√≠ d·ª•: 101, A01, ..."
            required
          />
        </div>

        <div className="form-group">
          <label>Lo·∫°i ph√≤ng: <span className="text-danger">*</span></label>
          <select
            className="form-control"
            value={typeId}
            onChange={(e) => setTypeId(e.target.value)}
            required
          >
            <option value="">Ch·ªçn lo·∫°i ph√≤ng</option>
            {roomTypes.map((type) => (
              <option key={type.TypeId} value={type.TypeId}>
                {type.TypeName} - {type.BasePrice?.toLocaleString('vi-VN')}ƒë
                {type.Description && ` (${type.Description})`}
              </option>
            ))}
          </select>
          {/* ‚úÖ HI·ªÇN TH·ªä TH√îNG TIN LO·∫†I PH√íNG ƒê√É CH·ªåN */}
          {typeId && roomTypes.length > 0 && (
            <small className="text-muted">
              {(() => {
                const selectedType = roomTypes.find(type => type.TypeId.toString() === typeId);
                return selectedType ? `üìù ${selectedType.Description || 'Kh√¥ng c√≥ m√¥ t·∫£'}` : '';
              })()}
            </small>
          )}
        </div>

        <div className="form-group">
          <label>T·∫ßng: <span className="text-danger">*</span></label>
          <select
            className="form-control"
            value={floor}
            onChange={(e) => setFloor(e.target.value)}
            required
          >
            <option value="">Ch·ªçn t·∫ßng</option>
            {floors.map((f) => (
              <option key={f} value={f}>{`T·∫ßng ${f}`}</option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>S·ª©c ch·ª©a: <span className="text-danger">*</span></label>
          <select
            className="form-control"
            value={capacity}
            onChange={(e) => setCapacity(e.target.value)}
            required
          >
            <option value="">Ch·ªçn s·ª©c ch·ª©a</option>
            {capacities.map((c) => (
              <option key={c} value={c}>{c} ng∆∞·ªùi</option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>Gi√° hi·ªán t·∫°i (VND): <span className="text-danger">*</span></label>
          <input
            type="number"
            className="form-control"
            value={currentPrice}
            onChange={(e) => setCurrentPrice(e.target.value)}
            placeholder="Nh·∫≠p gi√° ph√≤ng"
            min="0"
            step="1000"
            required
          />
          {currentPrice && (
            <small className="text-muted">
              üí∞ Gi√°: {parseFloat(currentPrice).toLocaleString('vi-VN')}ƒë
              {typeId && roomTypes.length > 0 && (() => {
                const selectedType = roomTypes.find(type => type.TypeId.toString() === typeId);
                const basePrice = selectedType?.BasePrice;
                if (basePrice && parseFloat(currentPrice) !== basePrice) {
                  const diff = parseFloat(currentPrice) - basePrice;
                  return ` (${diff > 0 ? '+' : ''}${diff.toLocaleString('vi-VN')}ƒë so v·ªõi gi√° g·ªëc)`;
                }
                return basePrice ? ' (gi√° g·ªëc)' : '';
              })()}
            </small>
          )}
        </div>

        <div className="form-group">
          <label>Tr·∫°ng th√°i:</label>
          <select
            className="form-control"
            value={status}
            onChange={(e) => setStatus(e.target.value)}
            required
          >
            {statusOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>M√¥ t·∫£:</label>
          <textarea
            className="form-control"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ ph√≤ng..."
            rows="3"
          />
        </div>

        <div className="form-group">
          <label className="mb-2 d-block">Ti·ªán nghi:</label>
          <div className="btn-group flex-wrap" role="group" aria-label="Amenity toggle buttons">
            {amenityOptions.map((amenity) => {
              const isActive = amenities.includes(amenity);
              return (
                <button
                  key={amenity}
                  type="button"
                  className={`btn btn-outline-primary m-1 ${isActive ? 'active' : ''}`}
                  onClick={() => {
                    if (isActive) {
                      setAmenities(amenities.filter((a) => a !== amenity));
                    } else {
                      setAmenities([...amenities, amenity]);
                    }
                  }}
                >
                  {amenityTranslations[amenity] || amenity}
                </button>
              );
            })}
          </div>
          {amenities.length > 0 && (
            <small className="text-muted">
              üéØ ƒê√£ ch·ªçn {amenities.length} ti·ªán nghi
            </small>
          )}
        </div>

        <div className="d-flex gap-2 mt-4">
          <button 
            type="submit" 
            className="btn btn-primary"
            disabled={submitLoading}
          >
            {submitLoading ? (
              <>
                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                ƒêang th√™m...
              </>
            ) : (
              'Th√™m ph√≤ng'
            )}
          </button>
          <button 
            type="button" 
            className="btn btn-secondary"
            onClick={() => navigate('/manager/rooms')}
            disabled={submitLoading}
          >
            H·ªßy
          </button>
        </div>
      </form>
    </div>
  );
}

export default AddRoomForm;