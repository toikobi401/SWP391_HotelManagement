import React, { useState, useEffect } from 'react';
import { Form, Button, Row, Col, Alert } from 'react-bootstrap';
import SimpleModal from '../../UI component/Modal/SimpleModal';
import styles from './ServiceModal.module.css';

const categories = [
  'Spa & Wellness',
  'ƒÇn u·ªëng',
  'V·∫≠n chuy·ªÉn',
  'Tour & Ho·∫°t ƒë·ªông',
  'D·ªãch v·ª• ph√≤ng',
  'Gi·∫∑t ·ªßi',
  'D·ªãch v·ª• doanh nghi·ªáp',
  'Gi·∫£i tr√≠',
  'Tr·∫ª em & Gia ƒë√¨nh',
  'S·ª©c kh·ªèe & Th·ªÉ thao',
  'Mua s·∫Øm',
  'S·ª± ki·ªán ƒë·∫∑c bi·ªát',
  'Kh√°c',
];

const ServiceModal = ({ 
  isOpen, 
  onClose, 
  serviceData = null, 
  onSave,
  mode = 'add' // 'add' ho·∫∑c 'edit'
}) => {
  const [service, setService] = useState({
    ServiceName: '',
    Description: '',
    Price: '',
    Category: 'Kh√°c',
    IsActive: true,
    Duration: 0,
    MaxCapacity: 0,
  });
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [validationErrors, setValidationErrors] = useState({});

  // ‚úÖ Reset form khi modal m·ªü/ƒë√≥ng
  useEffect(() => {
    if (isOpen) {
      if (mode === 'edit' && serviceData) {
        // Load d·ªØ li·ªáu cho edit mode
        setService({
          ServiceName: serviceData.ServiceName || '',
          Description: serviceData.Description || '',
          Price: serviceData.Price || '',
          Category: serviceData.Category || 'Kh√°c',
          IsActive: serviceData.IsActive !== undefined ? serviceData.IsActive : true,
          Duration: serviceData.Duration || 0,
          MaxCapacity: serviceData.MaxCapacity || 0,
        });
      } else {
        // Reset form cho add mode
        setService({
          ServiceName: '',
          Description: '',
          Price: '',
          Category: 'Kh√°c',
          IsActive: true,
          Duration: 0,
          MaxCapacity: 0,
        });
      }
      setError('');
      setSuccess('');
      setValidationErrors({});
    }
  }, [isOpen, mode, serviceData]);

  // ‚úÖ Handle input changes
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setService((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
    
    // Clear validation error for this field
    if (validationErrors[name]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // ‚úÖ Validation
  const validateForm = () => {
    const errors = {};

    if (!service.ServiceName.trim()) {
      errors.ServiceName = 'T√™n d·ªãch v·ª• l√† b·∫Øt bu·ªôc';
    } else if (service.ServiceName.trim().length < 3) {
      errors.ServiceName = 'T√™n d·ªãch v·ª• ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±';
    }

    if (!service.Description.trim()) {
      errors.Description = 'M√¥ t·∫£ l√† b·∫Øt bu·ªôc';
    } else if (service.Description.trim().length < 10) {
      errors.Description = 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
    }

    if (!service.Price || parseFloat(service.Price) <= 0) {
      errors.Price = 'Gi√° ph·∫£i l·ªõn h∆°n 0';
    }

    if (!service.Duration || parseInt(service.Duration) <= 0) {
      errors.Duration = 'Th·ªùi gian ph·∫£i l·ªõn h∆°n 0 ph√∫t';
    }

    if (!service.MaxCapacity || parseInt(service.MaxCapacity) <= 0) {
      errors.MaxCapacity = 'S·ª©c ch·ª©a t·ªëi ƒëa ph·∫£i l·ªõn h∆°n 0';
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // ‚úÖ Handle submit
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      setError('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin nh·∫≠p');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const servicePayload = {
        ...service,
        Price: parseFloat(service.Price),
        Duration: parseInt(service.Duration),
        MaxCapacity: parseInt(service.MaxCapacity),
      };

      if (mode === 'edit' && serviceData) {
        servicePayload.ServiceID = serviceData.ServiceID;
      }

      await onSave(servicePayload, mode);
      
      setSuccess(mode === 'add' ? 'Th√™m d·ªãch v·ª• th√†nh c√¥ng!' : 'C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng!');
      
      // ƒê√≥ng modal sau 1.5 gi√¢y
      setTimeout(() => {
        onClose();
      }, 1500);

    } catch (err) {
      console.error(`Error ${mode} service:`, err);
      setError(err.message || `L·ªói khi ${mode === 'add' ? 'th√™m' : 'c·∫≠p nh·∫≠t'} d·ªãch v·ª•`);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ Handle close v·ªõi confirmation n·∫øu c√≥ thay ƒë·ªïi
  const handleClose = () => {
    const hasChanges = mode === 'add' 
      ? Object.values(service).some(value => value !== '' && value !== 0 && value !== 'Kh√°c' && value !== true)
      : serviceData && Object.keys(service).some(key => 
          service[key] !== serviceData[key]
        );

    if (hasChanges && !loading) {
      if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒë√≥ng? Th√¥ng tin ch∆∞a l∆∞u s·∫Ω b·ªã m·∫•t.')) {
        onClose();
      }
    } else {
      onClose();
    }
  };

  return (
    <SimpleModal
      isOpen={isOpen}
      onClose={handleClose}
      title={
        <div className={styles.modalTitle}>
          <i className={`fas ${mode === 'add' ? 'fa-plus-circle' : 'fa-edit'}`}></i>
          <span>{mode === 'add' ? 'Th√™m d·ªãch v·ª• m·ªõi' : 'Ch·ªânh s·ª≠a d·ªãch v·ª•'}</span>
        </div>
      }
    >
      <div className={styles.serviceModal}>
        {/* ‚úÖ Status Messages */}
        {error && (
          <Alert variant="danger" className="mb-3">
            <i className="fas fa-exclamation-triangle me-2"></i>
            {error}
          </Alert>
        )}
        
        {success && (
          <Alert variant="success" className="mb-3">
            <i className="fas fa-check-circle me-2"></i>
            {success}
          </Alert>
        )}

        {/* ‚úÖ Form */}
        <Form onSubmit={handleSubmit}>
          <Row>
            <Col md={6}>
              {/* Service Name */}
              <Form.Group className="mb-3">
                <Form.Label className={styles.formLabel}>
                  <i className="fas fa-concierge-bell me-2"></i>
                  T√™n d·ªãch v·ª• <span className="text-danger">*</span>
                </Form.Label>
                <Form.Control
                  type="text"
                  name="ServiceName"
                  value={service.ServiceName}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p t√™n d·ªãch v·ª•..."
                  isInvalid={!!validationErrors.ServiceName}
                  className={styles.formControl}
                  disabled={loading}
                />
                <Form.Control.Feedback type="invalid">
                  {validationErrors.ServiceName}
                </Form.Control.Feedback>
              </Form.Group>

              {/* Description */}
              <Form.Group className="mb-3">
                <Form.Label className={styles.formLabel}>
                  <i className="fas fa-align-left me-2"></i>
                  M√¥ t·∫£ <span className="text-danger">*</span>
                </Form.Label>
                <Form.Control
                  as="textarea"
                  rows={3}
                  name="Description"
                  value={service.Description}
                  onChange={handleChange}
                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª•..."
                  isInvalid={!!validationErrors.Description}
                  className={styles.formControl}
                  disabled={loading}
                />
                <Form.Control.Feedback type="invalid">
                  {validationErrors.Description}
                </Form.Control.Feedback>
              </Form.Group>

              {/* Price */}
              <Form.Group className="mb-3">
                <Form.Label className={styles.formLabel}>
                  <i className="fas fa-dollar-sign me-2"></i>
                  Gi√° (VND) <span className="text-danger">*</span>
                </Form.Label>
                <Form.Control
                  type="number"
                  name="Price"
                  value={service.Price}
                  onChange={handleChange}
                  placeholder="0"
                  step="1000"
                  min="0"
                  isInvalid={!!validationErrors.Price}
                  className={styles.formControl}
                  disabled={loading}
                />
                <Form.Control.Feedback type="invalid">
                  {validationErrors.Price}
                </Form.Control.Feedback>
                {service.Price && (
                  <Form.Text className="text-muted">
                    üí∞ {parseInt(service.Price).toLocaleString('vi-VN')} VND
                  </Form.Text>
                )}
              </Form.Group>

              {/* Category */}
              <Form.Group className="mb-3">
                <Form.Label className={styles.formLabel}>
                  <i className="fas fa-tags me-2"></i>
                  Danh m·ª•c
                </Form.Label>
                <Form.Select 
                  name="Category" 
                  value={service.Category} 
                  onChange={handleChange}
                  className={styles.formControl}
                  disabled={loading}
                >
                  {categories.map((cat) => (
                    <option key={cat} value={cat}>
                      {cat}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </Col>

            <Col md={6}>
              {/* Duration */}
              <Form.Group className="mb-3">
                <Form.Label className={styles.formLabel}>
                  <i className="fas fa-clock me-2"></i>
                  Th·ªùi gian (ph√∫t) <span className="text-danger">*</span>
                </Form.Label>
                <Form.Control
                  type="number"
                  name="Duration"
                  value={service.Duration}
                  onChange={handleChange}
                  placeholder="0"
                  min="0"
                  isInvalid={!!validationErrors.Duration}
                  className={styles.formControl}
                  disabled={loading}
                />
                <Form.Control.Feedback type="invalid">
                  {validationErrors.Duration}
                </Form.Control.Feedback>
                {service.Duration > 0 && (
                  <Form.Text className="text-muted">
                    ‚è±Ô∏è {Math.floor(service.Duration / 60)}h {service.Duration % 60}m
                  </Form.Text>
                )}
              </Form.Group>

              {/* Max Capacity */}
              <Form.Group className="mb-3">
                <Form.Label className={styles.formLabel}>
                  <i className="fas fa-users me-2"></i>
                  S·ª©c ch·ª©a t·ªëi ƒëa <span className="text-danger">*</span>
                </Form.Label>
                <Form.Control
                  type="number"
                  name="MaxCapacity"
                  value={service.MaxCapacity}
                  onChange={handleChange}
                  placeholder="0"
                  min="0"
                  isInvalid={!!validationErrors.MaxCapacity}
                  className={styles.formControl}
                  disabled={loading}
                />
                <Form.Control.Feedback type="invalid">
                  {validationErrors.MaxCapacity}
                </Form.Control.Feedback>
              </Form.Group>

              {/* Active Status */}
              <Form.Group className="mb-3">
                <Form.Check
                  type="checkbox"
                  name="IsActive"
                  checked={service.IsActive}
                  onChange={handleChange}
                  label={
                    <span className={styles.checkboxLabel}>
                      <i className={`fas ${service.IsActive ? 'fa-check-circle' : 'fa-times-circle'} me-2`}></i>
                      D·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông
                    </span>
                  }
                  className={styles.formCheck}
                  disabled={loading}
                />
              </Form.Group>

              {/* Preview Info */}
              <div className={styles.previewCard}>
                <h6 className={styles.previewTitle}>
                  <i className="fas fa-eye me-2"></i>
                  Xem tr∆∞·ªõc
                </h6>
                <div className={styles.previewContent}>
                  <p><strong>T√™n:</strong> {service.ServiceName || 'Ch∆∞a nh·∫≠p'}</p>
                  <p><strong>Danh m·ª•c:</strong> {service.Category}</p>
                  <p><strong>Gi√°:</strong> {service.Price ? `${parseInt(service.Price).toLocaleString('vi-VN')} VND` : 'Ch∆∞a nh·∫≠p'}</p>
                  <p><strong>Th·ªùi gian:</strong> {service.Duration || 0} ph√∫t</p>
                  <p><strong>S·ª©c ch·ª©a:</strong> {service.MaxCapacity || 0} ng∆∞·ªùi</p>
                  <p><strong>Tr·∫°ng th√°i:</strong> 
                    <span className={`ms-2 ${service.IsActive ? 'text-success' : 'text-danger'}`}>
                      {service.IsActive ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                    </span>
                  </p>
                </div>
              </div>
            </Col>
          </Row>

          {/* ‚úÖ Action Buttons */}
          <div className={styles.modalActions}>
            <Button 
              variant="primary" 
              type="submit" 
              disabled={loading}
              className={styles.saveBtn}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  {mode === 'add' ? 'ƒêang th√™m...' : 'ƒêang c·∫≠p nh·∫≠t...'}
                </>
              ) : (
                <>
                  <i className={`fas ${mode === 'add' ? 'fa-plus' : 'fa-save'} me-2`}></i>
                  {mode === 'add' ? 'Th√™m d·ªãch v·ª•' : 'C·∫≠p nh·∫≠t d·ªãch v·ª•'}
                </>
              )}
            </Button>
            
            <Button 
              variant="secondary" 
              onClick={handleClose}
              disabled={loading}
              className={styles.cancelBtn}
            >
              <i className="fas fa-times me-2"></i>
              H·ªßy
            </Button>
          </div>
        </Form>
      </div>
    </SimpleModal>
  );
};

export default ServiceModal;