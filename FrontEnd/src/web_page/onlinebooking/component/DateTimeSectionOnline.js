import React from 'react';
import styles from './DateTimeSectionOnline.module.css';

const DateTimeSectionOnline = ({ formData, handleInputChange, nextStep, hasPrefilledData }) => {
  
  // ‚úÖ TH√äM: Debug log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
  console.log('üîç DateTimeSectionOnline - formData:', formData);
  console.log('üîç DateTimeSectionOnline - numberOfGuest:', formData.numberOfGuest);
  
  // ‚úÖ TH√äM: Validate form tr∆∞·ªõc khi next step
  const handleNextStep = () => {
    if (!formData.checkIn || !formData.checkOut || !formData.numberOfGuest) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ng√†y nh·∫≠n ph√≤ng, tr·∫£ ph√≤ng v√† s·ªë kh√°ch');
      return;
    }

    const checkInDate = new Date(formData.checkIn);
    const checkOutDate = new Date(formData.checkOut);
    const today = new Date();
    
    // Reset time to compare only dates
    today.setHours(0, 0, 0, 0);
    checkInDate.setHours(0, 0, 0, 0);
    checkOutDate.setHours(0, 0, 0, 0);

    if (checkInDate < today) {
      alert('Ng√†y nh·∫≠n ph√≤ng kh√¥ng th·ªÉ l√† ng√†y trong qu√° kh·ª©');
      return;
    }

    if (checkOutDate <= checkInDate) {
      alert('Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng');
      return;
    }

    if (formData.numberOfGuest < 1 || formData.numberOfGuest > 100) {
      alert('S·ªë kh√°ch ph·∫£i t·ª´ 1 ƒë·∫øn 100 ng∆∞·ªùi');
      return;
    }

    nextStep();
  };

  // ‚úÖ TH√äM: T√≠nh s·ªë ng√†y ·ªü
  const calculateNights = () => {
    if (formData.checkIn && formData.checkOut) {
      const checkInDate = new Date(formData.checkIn);
      const checkOutDate = new Date(formData.checkOut);
      const timeDiff = checkOutDate.getTime() - checkInDate.getTime();
      const nights = Math.ceil(timeDiff / (1000 * 3600 * 24));
      return nights > 0 ? nights : 0;
    }
    return 0;
  };

  const nights = calculateNights();

  return (
    <div className={styles.dateTimeSection}>
      <h2 className={styles.title}>X√°c Nh·∫≠n Ch·ªçn Ng√†y Nh·∫≠n V√† Tr·∫£ Ph√≤ng</h2>
      
      {/* ‚úÖ TH√äM: Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu c√≥ d·ªØ li·ªáu t·ª´ homepage */}
      {hasPrefilledData && (
        <div className={styles.prefilledNotice}>
          <i className="fas fa-check-circle"></i>
          Th√¥ng tin ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn s·∫µn t·ª´ trang ch·ªß. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c·∫ßn.
        </div>
      )}

      <div className={styles.formRow}>
        <label htmlFor="checkIn" className={styles.label}>
          <i className="fas fa-calendar-alt"></i>
          Ng√†y Nh·∫≠n Ph√≤ng
        </label>
        <input 
          type="date" 
          id="checkIn"
          name="checkIn" 
          value={formData.checkIn} 
          onChange={handleInputChange} 
          required 
          min={new Date().toISOString().split('T')[0]}
          className={styles.input}
        />
      </div>

      <div className={styles.formRow}>
        <label htmlFor="checkOut" className={styles.label}>
          <i className="fas fa-calendar-check"></i>
          Ng√†y Tr·∫£ Ph√≤ng
        </label>
        <input 
          type="date" 
          id="checkOut"
          name="checkOut" 
          value={formData.checkOut} 
          onChange={handleInputChange} 
          required 
          min={formData.checkIn || new Date().toISOString().split('T')[0]}
          className={styles.input}
        />
      </div>

      <div className={styles.formRow}>
        <label htmlFor="numberOfGuest" className={styles.label}>
          <i className="fas fa-users"></i>
          S·ªë Kh√°ch
        </label>
        <input 
          type="number" 
          id="numberOfGuest"
          name="numberOfGuest" 
          value={formData.numberOfGuest} 
          onChange={handleInputChange} 
          min={1} 
          max={100}
          required 
          className={styles.input}
        />
      </div>

      {/* ‚úÖ TH√äM: Hi·ªÉn th·ªã th√¥ng tin t√≥m t·∫Øt */}
      {formData.checkIn && formData.checkOut && nights > 0 && (
        <div className={styles.bookingInfo}>
          <h4 className={styles.bookingInfoTitle}>
            <i className="fas fa-info-circle"></i>
            Th√¥ng tin ƒë·∫∑t ph√≤ng
          </h4>
          <div className={styles.bookingInfoGrid}>
            <div>
              <strong>Nh·∫≠n ph√≤ng:</strong> {new Date(formData.checkIn).toLocaleDateString('vi-VN')}
            </div>
            <div>
              <strong>Tr·∫£ ph√≤ng:</strong> {new Date(formData.checkOut).toLocaleDateString('vi-VN')}
            </div>
            <div>
              <strong>S·ªë ƒë√™m:</strong> {nights} ƒë√™m
            </div>
            <div>
              <strong>S·ªë kh√°ch:</strong> {formData.numberOfGuest} ng∆∞·ªùi
            </div>
          </div>
        </div>
      )}

      <div className={styles.formActions}>
        <button 
          className={styles.btnNext}
          onClick={handleNextStep}
          disabled={!formData.checkIn || !formData.checkOut || !formData.numberOfGuest}
        >
          <i className="fas fa-search"></i>
          T√¨m ph√≤ng
        </button>
      </div>
    </div>
  );
};

export default DateTimeSectionOnline;