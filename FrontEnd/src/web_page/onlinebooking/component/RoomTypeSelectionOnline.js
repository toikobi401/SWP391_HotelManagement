import React, { useState, useEffect } from 'react';
import styles from './RoomTypeSelectionOnline.module.css';

const RoomTypeSelectionOnline = ({ 
  formData, 
  selectedRooms, 
  setSelectedRooms, 
  nextStep, 
  prevStep,
  roomTypes = [], // ‚úÖ TH√äM: Nh·∫≠n roomTypes t·ª´ props
  roomTypesLoading = false, // ‚úÖ TH√äM
  roomTypesError = '' // ‚úÖ TH√äM
}) => {
  const [quantities, setQuantities] = useState({});

  // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng roomTypes t·ª´ props thay v√¨ fetch
  // const [roomTypes, setRoomTypes] = useState([]);
  // const [roomTypesLoading, setRoomTypesLoading] = useState(true);
  // const [roomTypesError, setRoomTypesError] = useState('');

  // ‚úÖ S·ª¨A: B·ªè useEffect fetch v√¨ s·∫Ω nh·∫≠n t·ª´ props
  // useEffect(() => {
  //   fetchRoomTypesFromAPI();
  // }, []);

  // ‚úÖ S·ª¨A: B·ªè fetchRoomTypesFromAPI function

  // ‚úÖ S·ª¨A: B·ªè setFallbackRoomTypes function

  // ‚úÖ Helper functions (gi·ªØ nguy√™n)
  const getRoomIcon = (roomTypeId) => {
    const icons = {
      '1': 'üè®', '2': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', '3': 'üõèÔ∏è', '4': 'üíë', '5': '‚≠ê', '6': 'üí°'
    };
    return icons[roomTypeId] || 'üè®';
  };

  const getPriceCategory = (price) => {
    if (price < 300000) return { category: 'Ti·∫øt ki·ªám', color: '#16a34a' };
    if (price < 500000) return { category: 'Ti√™u chu·∫©n', color: '#2563eb' };
    if (price < 800000) return { category: 'Cao c·∫•p', color: '#dc2626' };
    return { category: 'Sang tr·ªçng', color: '#d69e2e' };
  };

  const getAvailabilityStatus = (roomType) => {
    const availableRooms = roomType.availableRooms || 0;
    const selectedQuantity = getSelectedRoomQuantity(roomType.id);
    const actualAvailable = availableRooms - selectedQuantity;
    
    if (actualAvailable === 0) {
      return { status: 'full', text: 'H·∫øt ph√≤ng', color: '#dc2626' };
    } else if (actualAvailable <= 3) {
      return { status: 'limited', text: `C√≤n ${actualAvailable} ph√≤ng`, color: '#f59e0b' };
    } else {
      return { status: 'available', text: `C√≤n ${actualAvailable} ph√≤ng`, color: '#16a34a' };
    }
  };

  // ‚úÖ Room selection logic (gi·ªØ nguy√™n)
  const isRoomTypeSelected = (roomTypeId) => {
    return selectedRooms.some(room => room.roomTypeId === roomTypeId);
  };

  const getSelectedRoomQuantity = (roomTypeId) => {
    const room = selectedRooms.find(room => room.roomTypeId === roomTypeId);
    return room ? room.quantity : 0;
  };

  const getQuantityForRoom = (roomTypeId) => {
    return quantities[roomTypeId] !== undefined ? quantities[roomTypeId] : getSelectedRoomQuantity(roomTypeId);
  };

  const handleQuantityChange = (roomTypeId, newQuantity) => {
    const quantity = Math.max(0, parseInt(newQuantity) || 0);
    const roomType = roomTypes.find(rt => rt.id === roomTypeId);
    
    if (quantity === 0) {
      // Remove room from selection
      setSelectedRooms(prev => prev.filter(room => room.roomTypeId !== roomTypeId));
      setQuantities(prev => ({ ...prev, [roomTypeId]: 0 }));
    } else {
      // Check availability
      const maxAvailable = roomType?.availableRooms || 0;
      const finalQuantity = Math.min(quantity, maxAvailable);
      
      // Update or add room
      setSelectedRooms(prev => {
        const existing = prev.find(room => room.roomTypeId === roomTypeId);
        if (existing) {
          return prev.map(room => 
            room.roomTypeId === roomTypeId 
              ? { ...room, quantity: finalQuantity }
              : room
          );
        } else {
          return [...prev, { roomTypeId, quantity: finalQuantity }];
        }
      });
      
      setQuantities(prev => ({ ...prev, [roomTypeId]: finalQuantity }));
    }
  };

  // ‚úÖ Calculate totals (gi·ªØ nguy√™n)
  const getTotalRooms = () => {
    return selectedRooms.reduce((total, room) => total + (room.quantity || 0), 0);
  };

  const getTotalCapacity = () => {
    return selectedRooms.reduce((total, room) => {
      const roomType = roomTypes.find(rt => rt.id === room.roomTypeId);
      return total + ((roomType?.maxOccupancy || 0) * (room.quantity || 0));
    }, 0);
  };

  const getTotalPrice = () => {
    return selectedRooms.reduce((total, room) => {
      const roomType = roomTypes.find(rt => rt.id === room.roomTypeId);
      return total + ((roomType?.price || 0) * (room.quantity || 0));
    }, 0);
  };

  // ‚úÖ Calculate nights (gi·ªØ nguy√™n)
  const calculateNights = () => {
    if (formData.checkIn && formData.checkOut) {
      const checkInDate = new Date(formData.checkIn);
      const checkOutDate = new Date(formData.checkOut);
      const timeDiff = checkOutDate.getTime() - checkInDate.getTime();
      const nights = Math.ceil(timeDiff / (1000 * 3600 * 24));
      return nights > 0 ? nights : 1;
    }
    return 1;
  };

  const nights = calculateNights();
  const totalRooms = getTotalRooms();
  const totalCapacity = getTotalCapacity();
  const totalPrice = getTotalPrice();
  // ‚úÖ FIX: S·ª≠ d·ª•ng ƒë√∫ng t√™n field t·ª´ formData
  const numberOfGuests = formData.numberOfGuest || 0;

  // ‚úÖ Validation before next step (gi·ªØ nguy√™n)
  const handleNextStep = () => {
    if (selectedRooms.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt lo·∫°i ph√≤ng');
      return;
    }

    if (totalCapacity < numberOfGuests) {
      alert(`S·ª©c ch·ª©a ph√≤ng ch∆∞a ƒë·ªß cho ${numberOfGuests} kh√°ch. Hi·ªán t·∫°i ch·ªâ c√≥ th·ªÉ ch·ª©a ${totalCapacity} ng∆∞·ªùi.`);
      return;
    }

    nextStep();
  };

  // ‚úÖ S·ª¨A: Loading state v·ªõi props
  if (roomTypesLoading) {
    return (
      <div className={styles.roomTypeSection}>
        <h2 className={styles.title}>Ch·ªçn lo·∫°i ph√≤ng</h2>
        <div className={styles.loadingState}>
          <div className="spinner-border text-primary" role="status">
            <span className="sr-only">ƒêang t·∫£i lo·∫°i ph√≤ng...</span>
          </div>
          <p>ƒêang t·∫£i th√¥ng tin ph√≤ng t·ª´ database...</p>
        </div>
      </div>
    );
  }

  // ‚úÖ S·ª¨A: Error state v·ªõi props
  if (roomTypesError) {
    return (
      <div className={styles.roomTypeSection}>
        <h2 className={styles.title}>Ch·ªçn lo·∫°i ph√≤ng</h2>
        <div className={styles.errorState}>
          <div className={styles.errorAlert}>
            <i className="fas fa-exclamation-triangle"></i>
            <p>Kh√¥ng th·ªÉ t·∫£i lo·∫°i ph√≤ng t·ª´ database: {roomTypesError}</p>
          </div>
          <button 
            className={styles.retryBtn}
            onClick={() => window.location.reload()} // Simple retry
          >
            <i className="fas fa-retry"></i>
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.roomTypeSection}>
      <h2 className={styles.title}>Ch·ªçn lo·∫°i ph√≤ng v√† s·ªë l∆∞·ª£ng</h2>
      
      {/* Booking Info */}
      <div className={styles.bookingInfo}>
        <h4 className={styles.bookingInfoTitle}>
          <i className="fas fa-info-circle"></i>
          Th√¥ng tin ƒë·∫∑t ph√≤ng
        </h4>
        <div className={styles.bookingInfoGrid}>
          <div><strong>S·ªë kh√°ch:</strong> {numberOfGuests} ng∆∞·ªùi</div>
          <div><strong>S·ªë ƒë√™m:</strong> {nights} ƒë√™m</div>
          <div><strong>Nh·∫≠n ph√≤ng:</strong> {new Date(formData.checkIn).toLocaleDateString('vi-VN')}</div>
          <div><strong>Tr·∫£ ph√≤ng:</strong> {new Date(formData.checkOut).toLocaleDateString('vi-VN')}</div>
        </div>
      </div>

      {/* Room Types Grid */}
      <div className={styles.roomTypesGrid}>
        {roomTypes.map(roomType => {
          const availability = getAvailabilityStatus(roomType);
          const priceCategory = getPriceCategory(roomType.price);
          const isSelected = isRoomTypeSelected(roomType.id);
          const selectedQuantity = getQuantityForRoom(roomType.id);
          const isAvailable = availability.status !== 'full';

          return (
            <div 
              key={roomType.id}
              className={`
                ${styles.roomTypeCard} 
                ${isSelected ? styles.selected : ''} 
                ${!isAvailable ? styles.unavailable : ''}
              `}
            >
              {/* Selection Indicator */}
              {isSelected && (
                <div className={styles.selectionIndicator}>
                  {selectedQuantity}
                </div>
              )}

              {/* Room Type Header */}
              <div className={styles.roomTypeHeader}>
                <div className={styles.roomTypeIcon}>
                  {getRoomIcon(roomType.id)}
                </div>
                <div className={styles.roomTypeTitle}>
                  <h4>{roomType.name}</h4>
                  <span 
                    className={styles.priceCategoryBadge}
                    style={{ backgroundColor: priceCategory.color }}
                  >
                    {priceCategory.category}
                  </span>
                </div>
              </div>

              {/* Room Description */}
              <p className={styles.roomDescription}>
                {roomType.description}
              </p>

              {/* Room Meta Info */}
              <div className={styles.roomMeta}>
                <div>
                  <i className="fas fa-users"></i>
                  <span>T·ªëi ƒëa {roomType.maxOccupancy} ng∆∞·ªùi</span>
                </div>
                <div>
                  <i className="fas fa-bed"></i>
                  <span>{roomType.totalRooms} ph√≤ng</span>
                </div>
              </div>

              {/* Availability Status */}
              <div 
                className={styles.availabilityStatus}
                style={{ color: availability.color }}
              >
                <i className="fas fa-circle"></i>
                <span>{availability.text}</span>
              </div>

              {/* Quantity Selector */}
              {isAvailable && (
                <div className={styles.quantitySelector}>
                  <label className={styles.quantityLabel}>
                    S·ªë l∆∞·ª£ng ph√≤ng:
                  </label>
                  <div className={styles.quantityControls}>
                    <button
                      type="button"
                      className={styles.quantityBtn}
                      onClick={() => handleQuantityChange(roomType.id, selectedQuantity - 1)}
                      disabled={selectedQuantity <= 0}
                    >
                      <i className="fas fa-minus"></i>
                    </button>
                    <input
                      type="number"
                      className={styles.quantityInput}
                      value={selectedQuantity}
                      onChange={(e) => handleQuantityChange(roomType.id, e.target.value)}
                      min="0"
                      max={roomType.availableRooms}
                    />
                    <button
                      type="button"
                      className={styles.quantityBtn}
                      onClick={() => handleQuantityChange(roomType.id, selectedQuantity + 1)}
                      disabled={selectedQuantity >= (roomType.availableRooms || 0)}
                    >
                      <i className="fas fa-plus"></i>
                    </button>
                  </div>
                </div>
              )}

              {/* Room Price Section */}
              <div className={styles.roomPriceSection}>
                <div className={styles.roomPrice}>
                  {roomType.price.toLocaleString('vi-VN')}ƒë
                </div>
                <div className={styles.roomPriceUnit}>
                  /ph√≤ng/ƒë√™m
                </div>
                
                {selectedQuantity > 0 && (
                  <>
                    <div className={styles.roomTotalPrice}>
                      T·ªïng: {(roomType.price * selectedQuantity * nights).toLocaleString('vi-VN')}ƒë
                    </div>
                    <div className={styles.roomTotalBreakdown}>
                      {selectedQuantity} ph√≤ng √ó {nights} ƒë√™m
                    </div>
                  </>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* Selection Summary */}
      {selectedRooms.length > 0 && (
        <div className={styles.selectionSummary}>
          <h4>
            <i className="fas fa-check-circle"></i>
            T√≥m t·∫Øt ph√≤ng ƒë√£ ch·ªçn
          </h4>
          <div className={styles.summaryGrid}>
            <div className={styles.summaryItem}>
              <span>T·ªïng ph√≤ng</span>
              <strong>{totalRooms} ph√≤ng</strong>
            </div>
            <div className={styles.summaryItem}>
              <span>S·ª©c ch·ª©a</span>
              <strong>{totalCapacity} ng∆∞·ªùi</strong>
            </div>
            <div className={styles.summaryItem}>
              <span>Gi√°/ƒë√™m</span>
              <strong>{totalPrice.toLocaleString('vi-VN')}ƒë</strong>
            </div>
            <div className={styles.summaryItem}>
              <span>T·ªïng ti·ªÅn</span>
              <strong style={{ color: '#059669' }}>
                {(totalPrice * nights).toLocaleString('vi-VN')}ƒë
              </strong>
            </div>
          </div>

          {/* Capacity Warning */}
          {totalCapacity < numberOfGuests && (
            <div className={styles.capacityWarning}>
              <i className="fas fa-exclamation-triangle"></i>
              S·ª©c ch·ª©a ch∆∞a ƒë·ªß cho {numberOfGuests} kh√°ch. C·∫ßn th√™m {numberOfGuests - totalCapacity} ch·ªó.
            </div>
          )}
        </div>
      )}

      {/* Navigation Actions */}
      <div className={styles.formActions}>
        <button 
          className={styles.btnBack}
          onClick={prevStep}
        >
          <i className="fas fa-arrow-left"></i>
          Quay l·∫°i
        </button>
        <button 
          className={styles.btnNext}
          onClick={handleNextStep}
          disabled={selectedRooms.length === 0}
        >
          Ti·∫øp t·ª•c
          <i className="fas fa-arrow-right"></i>
        </button>
      </div>
    </div>
  );
};

export default RoomTypeSelectionOnline;
